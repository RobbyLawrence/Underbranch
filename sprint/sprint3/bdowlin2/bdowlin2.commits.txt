===== editor/dist/bundle.js =====
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    1) /******/ (() => { // webpackBootstrap
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    2) /******/ 	var __webpack_modules__ = ({
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    3) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    4) /***/ "./src/App.js":
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    5) /*!********************!*\
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    6)   !*** ./src/App.js ***!
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    7)   \********************/
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    8) /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400    9) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400   10) "use strict";
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   11) __webpack_require__.r(__webpack_exports__);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   12) /* harmony export */ __webpack_require__.d(__webpack_exports__, {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   13) /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   14) /* harmony export */ });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   15) // Pull React hooks off the global React object. This file assumes React is
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   16) // available globally (e.g. via a <script> tag or bundler that provides it).
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   17) const {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   18)   useState,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   19)   useEffect
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   20) } = React;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   21) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   22) // Main application component. This is a small, non-JSX React component that
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   23) // uses React.createElement to build the UI. It wires together three pieces:
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   24) // - Toolbar: lets the user switch view modes and perform actions
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   25) // - LaTeXEditor: an editor component for editing LaTeX source
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   26) // - PreviewPane: renders the LaTeX source as HTML or a preview
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   27) const App = () => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   28)   // latexCode holds the current LaTeX source the user is editing. We
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   29)   // initialize it with a small sample document so the preview shows
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   30)   // something on first load.
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   31)   const [latexCode, setLatexCode] = useState(`\\documentclass{article}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   32) \\usepackage[utf8]{inputenc}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   33) \\title{My LaTeX Document}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   34) \\author{Author Name}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   35) \\date{\\today}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   36) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   37) \\begin{document}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   38) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   39) \\maketitle
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   40) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   41) \\section{Introduction}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   42) This is a sample LaTeX document. You can edit this text in the editor.
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   43) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   44) \\section{Mathematical Equations}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   45) Here's a mathematical equation:
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   46) \\begin{equation}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   47) E = mc^2
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   48) \\end{equation}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   49) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   50) And an inline equation: $\\alpha + \\beta = \\gamma$
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   51) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   52) \\subsection{More Examples}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   53) \\begin{itemize}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   54) \\item First item
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   55) \\item Second item
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   56) \\item Third item
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   57) \\end{itemize}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   58) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   59) \\end{document}`);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   60) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   61)   // viewMode controls which panes are visible. Possible values:
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   62)   // - 'editor'  -> only the editor is shown
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   63)   // - 'preview' -> only the preview is shown
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   64)   // - 'split'   -> both are shown side-by-side
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   65)   const [viewMode, setViewMode] = useState("split"); // 'editor', 'preview', 'split'
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   66)   const [pdfUrl, setPdfUrl] = useState(null);
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   67) 
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   68)   // Theme state: 'light' or 'dark'. Persist to localStorage and prefer
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   69)   // the user's system preference when no saved preference exists.
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   70)   const [theme, setTheme] = useState(() => {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   71)     try {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   72)       const saved = localStorage.getItem("ub_theme");
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   73)       if (saved) return saved;
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   74)       const prefersDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   75)       return prefersDark ? "dark" : "light";
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   76)     } catch (e) {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   77)       return "light";
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   78)     }
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   79)   });
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400   80) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   81)   // handleCodeChange is passed to the editor component. It receives the
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   82)   // new text value and updates the latexCode state. We guard against
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   83)   // undefined/null by falling back to an empty string.
20cb152f (Ferrari        2025-10-16 10:55:48 -0400   84)   const handleCodeChange = value => {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   85)     setLatexCode(value || "");
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   86)   };
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   87)   // handle compilation
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   88)   const handleCompile = async () => {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   89)     try {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   90)       const res = await fetch("/compile/", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   91)         method: "POST",
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   92)         headers: {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   93)           "Content-Type": "application/json"
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   94)         },
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   95)         body: JSON.stringify({
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   96)           latex: latexCode
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   97)         })
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   98)       });
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400   99)       if (!res.ok) {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  100)         const errText = await res.text();
a92cc0c9 (Robby Lawrence 2025-10-29 11:24:06 -0400  101)         alert("Compilation error: server is likely down");
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  102)         return;
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  103)       }
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  104)       const blob = await res.blob();
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  105)       const url = URL.createObjectURL(blob) + `#${Date.now()}`;
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  106)       // clean up old blobs
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  107)       setPdfUrl(prevUrl => {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  108)         if (prevUrl) URL.revokeObjectURL(prevUrl);
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  109)         return url;
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  110)       });
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  111)     } catch (err) {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  112)       alert("Network or server error: " + err.message);
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  113)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  114)   };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  115) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  116)   // Debug: log viewMode transitions so we can trace state changes while
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  117)   // reproducing the issue in the browser console.
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  118)   useEffect(() => {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  119)     console.log("[App] viewMode changed ->", viewMode);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  120)     // Also update the document title so the current mode is visible
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  121)     // in the browser tab (easy to spot without opening devtools).
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  122)     try {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  123)       document.title = `LaTeX Editor ΓÇö ${viewMode}`;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  124)     } catch (e) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  125)       // ignore (server side or non-browser env)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  126)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  127)     // Trigger a resize event to nudge layout systems (Monaco, CSS)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  128)     // to recompute sizes when the view mode changes.
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  129)     try {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  130)       window.dispatchEvent(new Event("resize"));
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  131)     } catch (e) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  132)       // ignore in non-browser environments
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  133)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  134)   }, [viewMode]);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  135) 
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  136)   // Apply theme to document root and persist choice
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  137)   useEffect(() => {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  138)     try {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  139)       document.documentElement.setAttribute("data-theme", theme);
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  140)       localStorage.setItem("ub_theme", theme);
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  141)     } catch (e) {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  142)       // ignore when not in browser
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  143)     }
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  144)   }, [theme]);
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  145) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  146)   // The UI layout is built with React.createElement calls instead of JSX.
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  147)   // To avoid layout glitches when switching modes we render both panes
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  148)   // consistently and toggle their visibility/size using explicit CSS
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  149)   // class names: 'split', 'full', or 'hidden'. This prevents frequent
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  150)   // unmount/remount of the editor which can cause Monaco/DOM layout issues.
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  151)   const editorClass = viewMode === "split" ? "split" : viewMode === "editor" ? "full" : "hidden";
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  152)   const previewClass = viewMode === "split" ? "split" : viewMode === "preview" ? "full" : "hidden";
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  153)   const editorVisible = viewMode === "split" || viewMode === "editor";
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  154)   const previewVisible = viewMode === "split" || viewMode === "preview";
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  155)   return React.createElement("div", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  156)     className: "app"
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  157)   }, React.createElement(Toolbar, {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  158)     viewMode: viewMode,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  159)     onViewModeChange: setViewMode,
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  160)     latexCode: latexCode,
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  161)     // add compilation handler
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400  162)     onCompile: handleCompile,
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400  163)     // i want the user to be able to download the pdf
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400  164)     // - robby
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  165)     pdfUrl: pdfUrl,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  166)     theme: theme,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  167)     onToggleTheme: () => setTheme(t => t === "light" ? "dark" : "light")
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  168)   }), React.createElement("div", {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  169)     className: `editor-container mode-${viewMode}`
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  170)   },
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  171)   // Editor pane is always present but may be hidden via the
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  172)   // 'hidden' class. This keeps Monaco mounted and stable.
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  173)   React.createElement("div", {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  174)     className: `editor-pane ${editorClass}`
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  175)   }, React.createElement(LaTeXEditor, {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  176)     value: latexCode,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  177)     onChange: handleCodeChange,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  178)     isVisible: editorVisible,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  179)     theme: theme
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  180)   })),
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  181)   // Preview pane is always present as well; it will be hidden
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  182)   // when not in 'preview' or 'split' modes.
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  183)   React.createElement("div", {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  184)     className: `preview-pane ${previewClass}`
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  185)   }, pdfUrl ? React.createElement("iframe", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  186)     src: pdfUrl,
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  187)     style: {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  188)       width: "100%",
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  189)       height: "100%",
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  190)       border: "none"
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  191)     },
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  192)     title: "PDF Preview"
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  193)   }) : React.createElement("div", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  194)     className: "loading"
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400  195)   }, "No PDF yet"))));
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  196) };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  197) /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (App);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  198) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  199) /***/ }),
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  200) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  201) /***/ "./src/Collaborative.js":
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  202) /*!******************************!*\
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  203)   !*** ./src/Collaborative.js ***!
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  204)   \******************************/
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  205) /***/ (() => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  206) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  207) // Collaborative features integration for the LaTeX Editor
a92cc0c9 (Robby Lawrence 2025-10-29 11:24:06 -0400  208) // This module handles real-time collaboration via Socket
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  209) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  210) class Collaborative {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  211)   constructor() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  212)     this.socket = null;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  213)     this.editor = null;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  214)     this.app = null;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  215)     this.users = [];
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  216)     this.currentUser = null;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  217)     this.currentRoom = null;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  218)     this.isUpdatingFromRemote = false;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  219)     this.decorations = [];
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  220)     this.init();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  221)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  222)   async init() {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  223)     console.log("Starting collaborative initialization...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  224) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  225)     // Wait for Socket.IO to be available
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  226)     console.log("Waiting for Socket.IO...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  227)     await this.waitForSocketIO();
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  228)     console.log("Socket.IO ready");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  229) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  230)     // Initialize socket connection
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  231)     console.log("Initializing socket connection...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  232)     this.initSocket();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  233) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  234)     // Get user info and join
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  235)     console.log("Getting user info...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  236)     await this.getUserInfo();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  237) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  238)     // Wait for the React app and Monaco editor
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  239)     console.log("Waiting for Monaco editor...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  240)     await this.waitForEditor();
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  241)     console.log("Monaco editor found!");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  242) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  243)     // Setup collaborative features
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  244)     console.log("Setting up collaboration...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  245)     this.setupCollaboration();
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  246)     console.log("Collaborative features initialized!");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  247)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  248)   waitForSocketIO() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  249)     return new Promise(resolve => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  250)       const checkSocketIO = () => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  251)         if (window.io) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  252)           resolve();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  253)         } else {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  254)           setTimeout(checkSocketIO, 100);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  255)         }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  256)       };
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  257)       checkSocketIO();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  258)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  259)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  260)   initSocket() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  261)     this.socket = io();
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  262)     this.socket.on("connect", () => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  263)       console.log("Connected to collaboration server");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  264)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  265)     this.socket.on("disconnect", () => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  266)       console.log("Disconnected from collaboration server");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  267)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  268)     this.socket.on("document-update", data => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  269)       console.log("Received document update from", data.userId);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  270)       this.handleRemoteUpdate(data);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  271)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  272)     this.socket.on("users-update", users => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  273)       console.log("Users list updated:", users.length, "users");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  274)       this.users = users;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  275)       this.updateUsersList();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  276)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  277)     this.socket.on("cursor-update", data => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  278)       this.handleCursorUpdate(data);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  279)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  280)     this.socket.on("room-joined", data => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  281)       console.log("Successfully joined room:", data.roomId);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  282)       this.currentRoom = data.roomId;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  283)       this.updateDocumentContent(data.content);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  284)       this.users = data.users;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  285)       this.updateUsersList();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  286) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  287)       // Show success message
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  288)       this.showMessage(`Joined room: ${data.roomId}${data.isPasswordProtected ? " (password protected)" : ""}`, "success");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  289)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  290)     this.socket.on("room-join-error", data => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  291)       console.error("Γ¥î Failed to join room:", data.message);
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  292)       if (data.error === "invalid-password") {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  293)         alert(`Γ¥î ${data.message}\n\nPlease try again.`);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  294)         setTimeout(() => this.promptForRoom(), 100);
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  295)       } else if (data.error === "room-not-found") {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  296)         const createRoom = confirm(`Γ¥î Room does not exist.\n\nWould you like to create it?`);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  297)         if (createRoom) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  298)           const password = prompt(`Set a password for the new room (or leave empty for no password):`);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  299)           this.joinRoom(this.currentRoom, password, true);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  300)         } else {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  301)           setTimeout(() => this.promptForRoom(), 100);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  302)         }
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  303)       } else if (data.error === "room-already-exists") {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  304)         alert(`Γ¥î ${data.message}`);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  305)         setTimeout(() => this.promptForRoom(), 100);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  306)       }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  307)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  308)     this.socket.on("room-check-result", data => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  309)       if (data.exists) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  310)         if (data.isPasswordProtected) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  311)           // Room exists and is password protected
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  312)           const password = prompt(`Room "${data.roomId}" exists and is password protected.\nEnter password:`);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  313)           this.joinRoom(data.roomId, password, false);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  314)         } else {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  315)           // Room exists and is public
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  316)           this.joinRoom(data.roomId, null, false);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  317)         }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  318)       } else {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  319)         // Room doesn't exist - ask if they want to create it
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  320)         const createRoom = confirm(`Room "${data.roomId}" doesn't exist.\nWould you like to create it?`);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  321)         if (createRoom) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  322)           const password = prompt(`Set a password for the new room "${data.roomId}" (or leave empty for no password):`);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  323)           this.joinRoom(data.roomId, password, true);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  324)         } else {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  325)           setTimeout(() => this.promptForRoom(), 100);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  326)         }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  327)       }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  328)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  329)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  330)   async getUserInfo() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  331)     // Check if user info is stored in localStorage
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  332)     let userName = localStorage.getItem("collaborativeUserName");
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  333)     let userColor = localStorage.getItem("collaborativeUserColor");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  334)     if (!userName) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  335)       userName = prompt("Enter your name for collaborative editing:") || `User ${Date.now()}`;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  336)       localStorage.setItem("collaborativeUserName", userName);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  337)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  338)     if (!userColor) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  339)       userColor = this.getRandomColor();
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  340)       localStorage.setItem("collaborativeUserColor", userColor);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  341)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  342)     this.currentUser = {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  343)       name: userName,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  344)       color: userColor
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  345)     };
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  346) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  347)     // Prompt for room
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  348)     await this.promptForRoom();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  349)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  350)   async promptForRoom() {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  351)     const roomId = prompt('Enter room name to join (or leave empty for "general"):') || "general";
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  352)     if (roomId === "general") {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  353)       // General room is always accessible without password
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  354)       this.joinRoom(roomId, null, true); // Always "create" general room to ensure it exists
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  355)       return;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  356)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  357) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  358)     // Check if room exists first
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  359)     this.checkRoomExists(roomId);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  360)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  361)   checkRoomExists(roomId) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  362)     console.log(`Checking if room "${roomId}" exists...`);
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  363)     this.socket.emit("check-room", {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  364)       roomId
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  365)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  366)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  367)   joinRoom(roomId, password, createRoom) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  368)     this.currentRoom = roomId;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  369)     this.socket.emit("join-room", {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  370)       roomId: roomId,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  371)       userData: this.currentUser,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  372)       password: password,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  373)       createRoom: createRoom
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  374)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  375)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  376)   waitForEditor() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  377)     return new Promise(resolve => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  378)       const checkEditor = () => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  379)         console.log("Looking for Monaco editor...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  380) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  381)         // Look for Monaco editor in multiple ways
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  382)         const editorElement = document.getElementById("monaco-editor");
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  383)         console.log("Editor element found:", !!editorElement);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  384)         if (window.monaco) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  385)           console.log("Monaco global available");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  386) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  387)           // Try to get editor from the element
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  388)           if (editorElement && editorElement._monacoEditor) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  389)             console.log("Found editor on element._monacoEditor");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  390)             this.editor = editorElement._monacoEditor;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  391)             resolve();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  392)             return;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  393)           }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  394) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  395)           // Try to get all editors from Monaco
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  396)           const editors = window.monaco.editor.getEditors();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  397)           if (editors.length > 0) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  398)             console.log("Found editor via monaco.editor.getEditors():", editors.length);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  399)             this.editor = editors[0];
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  400)             resolve();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  401)             return;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  402)           }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  403)         } else {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  404)           console.log(" Monaco global not available yet");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  405)         }
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  406)         console.log("Editor not ready yet, retrying...");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  407)         setTimeout(checkEditor, 500);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  408)       };
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  409)       checkEditor();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  410)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  411)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  412)   setupCollaboration() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  413)     if (!this.editor) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  414)       console.error("Monaco editor not found");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  415)       return;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  416)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  417) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  418)     // Listen for local changes
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  419)     this.editor.onDidChangeModelContent(e => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  420)       if (!this.isUpdatingFromRemote) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  421)         const content = this.editor.getValue();
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  422)         console.log("Local change detected, broadcasting...", content.length, "characters");
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  423)         this.socket.emit("document-change", {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  424)           content: content,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  425)           changes: e.changes
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  426)         });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  427)       } else {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  428)         console.log("Skipping broadcast - change from remote");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  429)       }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  430)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  431) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  432)     // Listen for cursor position changes
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  433)     this.editor.onDidChangeCursorPosition(e => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  434)       this.socket.emit("cursor-update", {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  435)         lineNumber: e.position.lineNumber,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  436)         column: e.position.column
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  437)       });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  438)     });
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  439)     console.log("Editor event listeners setup complete");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  440)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  441)   updateDocumentContent(content) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  442)     if (this.editor && this.editor.getValue() !== content) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  443)       console.log("Updating editor content from remote...", content.length, "characters");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  444)       this.isUpdatingFromRemote = true;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  445)       const position = this.editor.getPosition();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  446)       this.editor.setValue(content);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  447)       if (position) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  448)         this.editor.setPosition(position);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  449)       }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  450)       this.isUpdatingFromRemote = false;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  451)       console.log("Editor content updated successfully");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  452)     } else {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  453)       console.log("Content already up to date, skipping update");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  454)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  455)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  456)   handleRemoteUpdate(data) {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  457)     console.log("Received remote update from", data.userId);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  458)     this.updateDocumentContent(data.content);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  459)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  460)   handleCursorUpdate(data) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  461)     if (!this.editor) return;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  462) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  463)     // Remove old decorations for this user
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  464)     const oldDecorations = this.decorations.filter(d => d.userId === data.userId);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  465)     if (oldDecorations.length > 0) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  466)       this.editor.deltaDecorations(oldDecorations.map(d => d.id), []);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  467)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  468) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  469)     // Add new cursor decoration
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  470)     const decoration = {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  471)       range: new monaco.Range(data.cursor.lineNumber, data.cursor.column, data.cursor.lineNumber, data.cursor.column + 1),
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  472)       options: {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  473)         className: "collaborative-cursor",
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  474)         stickiness: monaco.editor.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  475)         hoverMessage: {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  476)           value: `${data.user.name}'s cursor`
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  477)         },
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  478)         after: {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  479)           content: `${data.user.name}`,
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  480)           inlineClassName: "collaborative-cursor-label",
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  481)           color: data.user.color
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  482)         }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  483)       }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  484)     };
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  485)     const decorationIds = this.editor.deltaDecorations([], [decoration]);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  486) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  487)     // Store decoration info
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  488)     this.decorations = this.decorations.filter(d => d.userId !== data.userId);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  489)     this.decorations.push({
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  490)       userId: data.userId,
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  491)       id: decorationIds[0]
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  492)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  493)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  494)   updateUsersList() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  495)     // Create or update users list UI
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  496)     this.createUsersListUI();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  497)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  498)   createUsersListUI() {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  499)     // Remove existing users list
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  500)     const existingList = document.getElementById("collaborative-users");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  501)     if (existingList) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  502)       existingList.remove();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  503)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  504) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  505)     // Create new users list
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  506)     const usersList = document.createElement("div");
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  507)     usersList.id = "collaborative-users";
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  508)     usersList.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  509)             position: fixed;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  510)             top: 60px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  511)             right: 20px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  512)             background: white;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  513)             border: 1px solid #ddd;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  514)             border-radius: 8px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  515)             padding: 12px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  516)             box-shadow: 0 2px 10px rgba(0,0,0,0.1);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  517)             z-index: 1000;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  518)             max-width: 220px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  519)         `;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  520) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  521)     // Room info
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  522)     const roomInfo = document.createElement("div");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  523)     roomInfo.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  524)             background: #f8f9fa;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  525)             padding: 8px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  526)             border-radius: 4px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  527)             margin-bottom: 12px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  528)             border-left: 3px solid #4834D4;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  529)         `;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  530)     const roomTitle = document.createElement("div");
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  531)     roomTitle.textContent = `Room: ${this.currentRoom || "Not connected"}`;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  532)     roomTitle.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  533)             font-weight: bold;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  534)             color: #333;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  535)             font-size: 13px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  536)             margin-bottom: 4px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  537)         `;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  538)     const switchButton = document.createElement("button");
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  539)     switchButton.textContent = "Switch Room";
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  540)     switchButton.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  541)             background: #4834D4;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  542)             color: white;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  543)             border: none;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  544)             padding: 4px 8px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  545)             border-radius: 3px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  546)             font-size: 11px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  547)             cursor: pointer;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  548)         `;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  549)     switchButton.onclick = () => this.promptForRoom();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  550)     roomInfo.appendChild(roomTitle);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  551)     roomInfo.appendChild(switchButton);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  552)     usersList.appendChild(roomInfo);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  553) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  554)     // Users title
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  555)     const title = document.createElement("div");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  556)     title.textContent = `Online Users (${this.users.length})`;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  557)     title.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  558)             font-weight: bold;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  559)             margin-bottom: 8px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  560)             color: #333;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  561)             font-size: 14px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  562)         `;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  563)     usersList.appendChild(title);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  564) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  565)     // Users list
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  566)     this.users.forEach(user => {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  567)       const userElement = document.createElement("div");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  568)       userElement.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  569)                 display: flex;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  570)                 align-items: center;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  571)                 margin-bottom: 6px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  572)                 font-size: 13px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  573)             `;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  574)       const colorDot = document.createElement("div");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  575)       colorDot.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  576)                 width: 12px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  577)                 height: 12px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  578)                 background-color: ${user.color};
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  579)                 border-radius: 50%;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  580)                 margin-right: 8px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  581)             `;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  582)       const nameElement = document.createElement("span");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  583)       nameElement.textContent = user.name;
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  584)       nameElement.style.color = "#555";
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  585)       userElement.appendChild(colorDot);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  586)       userElement.appendChild(nameElement);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  587)       usersList.appendChild(userElement);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  588)     });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  589)     document.body.appendChild(usersList);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  590)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  591)   getRandomColor() {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  592)     const colors = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FECA57", "#FF9FF3", "#54A0FF", "#5F27CD", "#00D2D3", "#FF9F43"];
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  593)     return colors[Math.floor(Math.random() * colors.length)];
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  594)   }
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  595)   showMessage(message, type = "info") {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  596)     // Create message element
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  597)     const messageDiv = document.createElement("div");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  598)     messageDiv.textContent = message;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  599)     messageDiv.style.cssText = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  600)             position: fixed;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  601)             top: 20px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  602)             right: 20px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  603)             padding: 12px 20px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  604)             border-radius: 6px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  605)             color: white;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  606)             font-weight: bold;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  607)             z-index: 10000;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  608)             max-width: 300px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  609)             box-shadow: 0 4px 12px rgba(0,0,0,0.3);
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  610)             background-color: ${type === "success" ? "#10AC84" : type === "error" ? "#EE5A24" : "#4834D4"};
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  611)         `;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  612)     document.body.appendChild(messageDiv);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  613) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  614)     // Remove after 4 seconds
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  615)     setTimeout(() => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  616)       if (messageDiv.parentNode) {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  617)         messageDiv.parentNode.removeChild(messageDiv);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  618)       }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  619)     }, 4000);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  620)   }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  621) }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  622) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  623) // CSS for collaborative cursors
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  624) const style = document.createElement("style");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  625) style.textContent = `
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  626)     .collaborative-cursor {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  627)         border-left: 2px solid !important;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  628)         background-color: rgba(255, 107, 107, 0.2) !important;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  629)     }
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  630) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  631)     .collaborative-cursor-label {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  632)         background-color: #FF6B6B;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  633)         color: white;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  634)         padding: 2px 6px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  635)         border-radius: 3px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  636)         font-size: 11px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  637)         position: relative;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  638)         top: -20px;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  639)         white-space: nowrap;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  640)     }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  641) `;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  642) document.head.appendChild(style);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  643) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  644) // Initialize when DOM is ready
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  645) if (document.readyState === "loading") {
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400  646)   document.addEventListener("DOMContentLoaded", () => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  647)     window.collaborative = new Collaborative();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  648)   });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  649) } else {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  650)   window.collaborative = new Collaborative();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  651) }
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  652) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  653) // Make Collaborative available globally
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  654) window.Collaborative = Collaborative;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  655) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  656) /***/ }),
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  657) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  658) /***/ "./src/LaTeXEditor.js":
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  659) /*!****************************!*\
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  660)   !*** ./src/LaTeXEditor.js ***!
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  661)   \****************************/
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  662) /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  663) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400  664) "use strict";
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  665) __webpack_require__.r(__webpack_exports__);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  666) /* harmony export */ __webpack_require__.d(__webpack_exports__, {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  667) /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  668) /* harmony export */ });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  669) const {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  670)   useEffect,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  671)   useRef
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  672) } = React;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  673) const LaTeXEditor = ({
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  674)   value,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  675)   onChange,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  676)   isVisible = true,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  677)   theme = "light"
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  678) }) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  679)   const editorRef = useRef(null);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  680)   const monacoRef = useRef(null);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  681)   const layoutTimeout = useRef(null);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  682)   useEffect(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  683)     // Initialize Monaco Editor
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  684)     if (window.require && !monacoRef.current) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  685)       window.require.config({
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  686)         paths: {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  687)           vs: "https://unpkg.com/monaco-editor@0.44.0/min/vs"
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  688)         }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  689)       });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  690)       window.require(["vs/editor/editor.main"], () => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  691)         if (editorRef.current && !monacoRef.current) {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  692)           // Configure LaTeX language
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  693)           monaco.languages.register({
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  694)             id: "latex"
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  695)           });
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  696) 
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  697)           // Define light and dark themes so the editor responds to
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  698)           // the app-level theme toggle. We keep token rules similar
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  699)           // but swap base and color tokens for readability on dark.
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  700)           monaco.editor.defineTheme("underbranch-light", {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  701)             base: "vs",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  702)             inherit: true,
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  703)             rules: [{
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  704)               token: "keyword",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  705)               foreground: "B5632D"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  706)             }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  707)               token: "string",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  708)               foreground: "218721"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  709)             }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  710)               token: "comment",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  711)               foreground: "737373",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  712)               fontStyle: "italic"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  713)             }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  714)               token: "bracket",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  715)               foreground: "505050"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  716)             }],
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  717)             colors: {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  718)               "editor.background": "#FFFFFF",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  719)               "editor.foreground": "#333333",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  720)               "editor.lineHighlightBackground": "#F5F5F5",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  721)               "editorCursor.foreground": "#B5632D",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  722)               "editor.selectionBackground": "#E8D3C7",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  723)               "editorLineNumber.foreground": "#999999"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  724)             }
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  725)           });
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  726)           monaco.editor.defineTheme("underbranch-dark", {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  727)             base: "vs-dark",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  728)             inherit: true,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  729)             rules: [{
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  730)               token: "keyword",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  731)               foreground: "DCA06B"
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  732)             }, {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  733)               token: "string",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  734)               foreground: "78C179"
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  735)             }, {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  736)               token: "comment",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  737)               foreground: "94A3B8",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  738)               fontStyle: "italic"
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  739)             }, {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  740)               token: "bracket",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  741)               foreground: "9AA6B2"
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  742)             }],
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  743)             colors: {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  744)               // Dark background aligned with page dark vars
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  745)               "editor.background": "#071122",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  746)               "editor.foreground": "#E6EEF8",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  747)               "editor.lineHighlightBackground": "#0b2230",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  748)               "editorCursor.foreground": "#B5632D",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  749)               "editor.selectionBackground": "#163246",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  750)               "editorLineNumber.foreground": "#6B7280"
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  751)             }
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  752)           });
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  753) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  754)           // Syntax highlighting
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  755)           monaco.languages.setMonarchTokensProvider("latex", {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  756)             tokenizer: {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  757)               root: [[/\\[a-zA-Z@]+/, "keyword"], [/\\begin\{[^}]+\}/, "keyword"], [/\\end\{[^}]+\}/, "keyword"], [/\$.*?\$/, "string"], [/\\\(.*?\\\)/, "string"], [/\\\[.*?\\\]/, "string"], [/%.*$/, "comment"], [/\{/, "bracket"], [/\}/, "bracket"]]
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  758)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  759)           });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  760) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  761)           // LaTeX command definitions
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  762)           const latexCommands = [{
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  763)             command: "begin",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  764)             insertText: "begin{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  765)             documentation: "Begin environment"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  766)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  767)             command: "end",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  768)             insertText: "end{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  769)             documentation: "End environment"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  770)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  771)             command: "textbf",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  772)             insertText: "textbf{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  773)             documentation: "Bold text"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  774)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  775)             command: "textit",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  776)             insertText: "textit{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  777)             documentation: "Italic text"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  778)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  779)             command: "underline",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  780)             insertText: "underline{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  781)             documentation: "Underline text"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  782)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  783)             command: "section",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  784)             insertText: "section{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  785)             documentation: "Section"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  786)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  787)             command: "subsection",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  788)             insertText: "subsection{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  789)             documentation: "Subsection"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  790)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  791)             command: "subsubsection",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  792)             insertText: "subsubsection{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  793)             documentation: "Subsubsection"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  794)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  795)             command: "chapter",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  796)             insertText: "chapter{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  797)             documentation: "Chapter"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  798)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  799)             command: "title",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  800)             insertText: "title{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  801)             documentation: "Document title"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  802)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  803)             command: "author",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  804)             insertText: "author{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  805)             documentation: "Document author"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  806)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  807)             command: "date",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  808)             insertText: "date{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  809)             documentation: "Document date"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  810)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  811)             command: "emph",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  812)             insertText: "emph{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  813)             documentation: "Emphasize text"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  814)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  815)             command: "frac",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  816)             insertText: "frac{$1}{$2}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  817)             documentation: "Fraction"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  818)           }, {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  819)             command: "sqrt",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  820)             insertText: "sqrt{$0}",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  821)             documentation: "Square root"
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  822)           }];
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  823)           const latexEnvironments = ["document", "equation", "align", "itemize", "enumerate", "figure", "table", "center", "abstract"];
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  824) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  825)           // Register completion provider for LaTeX commands
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  826)           monaco.languages.registerCompletionItemProvider("latex", {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  827)             triggerCharacters: ["\\", "{"],
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  828)             provideCompletionItems: (model, position) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  829)               const lineContent = model.getLineContent(position.lineNumber);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  830)               const textBeforeCursor = lineContent.substring(0, position.column - 1);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  831) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  832)               // Command completions (after \)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  833)               const commandMatch = textBeforeCursor.match(/\\([a-zA-Z]*)$/);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  834)               if (commandMatch) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  835)                 const partialCommand = commandMatch[1];
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  836)                 const textAfterCursor = lineContent.substring(position.column - 1);
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  837)                 const suggestions = latexCommands.filter(cmd => cmd.command.startsWith(partialCommand)).map(cmd => {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  838)                   // Check if cursor is inside braces and there's a closing brace
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  839)                   const hasOpenBrace = textBeforeCursor.match(/\{[^}]*$/);
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  840)                   const hasClosingBrace = hasOpenBrace && textAfterCursor.startsWith('}');
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  841) 
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  842)                   // If we're inside braces with a closing brace, don't include it in insertText
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  843)                   let insertText = cmd.insertText;
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  844)                   let endColumn = position.column;
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  845)                   if (hasClosingBrace && insertText.includes('{')) {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  846)                     // Remove the closing brace from commands like "textbf{$0}"
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  847)                     insertText = insertText.replace(/\{([^}]*)\}/, '{$1');
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  848)                     endColumn = position.column + 1; // Include the closing brace in replacement
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  849)                   }
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  850)                   return {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  851)                     label: cmd.command,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  852)                     kind: monaco.languages.CompletionItemKind.Function,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  853)                     insertText: insertText,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  854)                     insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  855)                     documentation: cmd.documentation,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  856)                     range: {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  857)                       startLineNumber: position.lineNumber,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  858)                       startColumn: position.column - partialCommand.length,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  859)                       endLineNumber: position.lineNumber,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  860)                       endColumn: endColumn
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  861)                     }
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  862)                   };
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  863)                 });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  864)                 return {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  865)                   suggestions
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  866)                 };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  867)               }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  868) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  869)               // Environment completions (after \begin{)
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  870)               const beginMatch = textBeforeCursor.match(/\\begin\{([^}]*)$/);
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  871)               if (beginMatch) {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  872)                 const partialEnv = beginMatch[1];
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  873)                 const textAfterCursor = lineContent.substring(position.column - 1);
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  874) 
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  875)                 // Check if there's already a closing brace after the cursor
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  876)                 const hasClosingBrace = textAfterCursor.startsWith('}');
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  877)                 const suggestions = latexEnvironments.filter(env => env.startsWith(partialEnv)).map(env => {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  878)                   // If there's already a closing brace, we need to handle it carefully
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  879)                   let insertText, endColumn;
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  880)                   if (hasClosingBrace) {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  881)                     // Include the environment content but skip past the existing closing brace
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  882)                     insertText = `${env}}\n\t$0\n\\end{${env}}`;
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  883)                     endColumn = position.column + 1; // Replace up to and including the }
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  884)                   } else {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  885)                     // No closing brace, add everything including the brace
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  886)                     insertText = `${env}}\n\t$0\n\\end{${env}}`;
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  887)                     endColumn = position.column;
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  888)                   }
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  889)                   return {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  890)                     label: env,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  891)                     kind: monaco.languages.CompletionItemKind.Keyword,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  892)                     insertText: insertText,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  893)                     insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  894)                     documentation: `Insert ${env} environment`,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  895)                     range: {
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  896)                       startLineNumber: position.lineNumber,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  897)                       startColumn: position.column - partialEnv.length,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  898)                       endLineNumber: position.lineNumber,
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  899)                       endColumn: endColumn
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  900)                     }
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  901)                   };
8fa4eecd (Ferrari        2025-10-27 23:24:58 -0400  902)                 });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  903)                 return {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  904)                   suggestions
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  905)                 };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  906)               }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  907)               return {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  908)                 suggestions: []
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  909)               };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  910)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  911)           });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  912) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  913)           // Auto-close \begin{} with \end{}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  914)           monaco.languages.registerCompletionItemProvider("latex", {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  915)             triggerCharacters: ["}"],
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  916)             provideCompletionItems: (model, position) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  917)               const lineContent = model.getLineContent(position.lineNumber);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  918)               const textBeforeCursor = lineContent.substring(0, position.column - 1);
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  919)               const textAfterCursor = lineContent.substring(position.column - 1);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  920)               const beginMatch = textBeforeCursor.match(/\\begin\{([^}]+)\}$/);
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  921) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  922)               // Only suggest auto-close if there's not already an \end{} on the same line
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  923)               // or if we haven't already inserted the environment completion
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  924)               if (beginMatch && !textAfterCursor.match(/^\s*\n\s*\\end\{/)) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  925)                 const environmentName = beginMatch[1];
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  926) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  927)                 // Check if this is one of our predefined environments
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  928)                 // If so, don't auto-close as it was already handled by the environment completion
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  929)                 if (latexEnvironments.includes(environmentName)) {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  930)                   return {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  931)                     suggestions: []
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  932)                   };
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  933)                 }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  934)                 return {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  935)                   suggestions: [{
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  936)                     label: `Auto-close \\end{${environmentName}}`,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  937)                     kind: monaco.languages.CompletionItemKind.Snippet,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  938)                     insertText: `\n\t$0\n\\end{${environmentName}}`,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  939)                     insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  940)                     documentation: `Auto-close with \\end{${environmentName}}`,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  941)                     range: {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  942)                       startLineNumber: position.lineNumber,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  943)                       startColumn: position.column,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  944)                       endLineNumber: position.lineNumber,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  945)                       endColumn: position.column
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  946)                     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  947)                   }]
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  948)                 };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  949)               }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  950)               return {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  951)                 suggestions: []
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  952)               };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  953)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  954)           });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  955) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  956)           // Create the editor
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  957)           monacoRef.current = monaco.editor.create(editorRef.current, {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  958)             value: value,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  959)             language: "latex",
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400  960)             theme: theme === "dark" ? "underbranch-dark" : "underbranch-light",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  961)             fontSize: 15,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  962)             lineNumbers: "on",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  963)             roundedSelection: true,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  964)             scrollBeyondLastLine: false,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  965)             automaticLayout: true,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  966)             minimap: {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  967)               enabled: false
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  968)             },
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  969)             wordWrap: "on",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  970)             lineHeight: 24,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  971)             padding: {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  972)               top: 16,
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  973)               bottom: 16
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  974)             },
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  975)             renderLineHighlight: "all",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  976)             cursorBlinking: "smooth",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  977)             cursorWidth: 2,
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  978)             fontFamily: "'Fira Code', 'SF Mono', Consolas, 'Courier New', monospace",
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  979)             fontLigatures: true,
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  980)             smoothScrolling: true,
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  981)             guides: {
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  982)               indentation: true,
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400  983)               bracketPairs: true
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  984)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  985)           });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  986) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  987)           // Listen for content changes
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  988)           monacoRef.current.onDidChangeModelContent(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  989)             const currentValue = monacoRef.current.getValue();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  990)             if (onChange) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  991)               onChange(currentValue);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  992)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  993)           });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  994)         }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  995)       });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  996)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  997) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  998)     // Listen for clear editor event
20cb152f (Ferrari        2025-10-16 10:55:48 -0400  999)     const handleClearEditor = () => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1000)       if (monacoRef.current) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1001)         monacoRef.current.setValue("");
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1002)       }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1003)     };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1004)     window.addEventListener("clearEditor", handleClearEditor);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1005)     return () => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1006)       window.removeEventListener("clearEditor", handleClearEditor);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1007)       if (monacoRef.current) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1008)         monacoRef.current.dispose();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1009)         monacoRef.current = null;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1010)       }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1011)     };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1012)   }, []);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1013) 
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1014)   // If the app-level theme changes, update the Monaco theme in-place.
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1015)   useEffect(() => {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1016)     try {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1017)       if (monacoRef.current && window.monaco && window.monaco.editor) {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1018)         window.monaco.editor.setTheme(theme === "dark" ? "underbranch-dark" : "underbranch-light");
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1019)       }
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1020)     } catch (e) {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1021)       // Ignore: monaco may not be available during SSR or early loads
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1022)     }
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1023)   }, [theme]);
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1024) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1025)   // Update editor value when prop changes
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1026)   useEffect(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1027)     if (monacoRef.current && monacoRef.current.getValue() !== value) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1028)       monacoRef.current.setValue(value);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1029)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1030)   }, [value]);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1031) 
1df2fe04 (Ferrari        2025-10-27 23:02:07 -0400 1032)   // Recalculate layout when editor becomes visible
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1033)   useEffect(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1034)     if (!monacoRef.current) return;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1035)     if (isVisible) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1036)       if (layoutTimeout.current) clearTimeout(layoutTimeout.current);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1037)       layoutTimeout.current = setTimeout(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1038)         try {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1039)           monacoRef.current.layout();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1040)         } catch (e) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1041)           console.warn("monaco.layout failed", e);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1042)         }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1043)       }, 50);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1044)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1045)     return () => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1046)       if (layoutTimeout.current) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1047)         clearTimeout(layoutTimeout.current);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1048)         layoutTimeout.current = null;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1049)       }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1050)     };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1051)   }, [isVisible]);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1052)   return React.createElement("div", {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1053)     ref: editorRef,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1054)     id: "monaco-editor"
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1055)   });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1056) };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1057) /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LaTeXEditor);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1058) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1059) /***/ }),
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1060) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1061) /***/ "./src/PreviewPane.js":
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1062) /*!****************************!*\
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1063)   !*** ./src/PreviewPane.js ***!
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1064)   \****************************/
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1065) /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1066) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1067) "use strict";
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1068) __webpack_require__.r(__webpack_exports__);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1069) /* harmony export */ __webpack_require__.d(__webpack_exports__, {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1070) /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1071) /* harmony export */ });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1072) const PreviewPane = ({
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1073)   latexCode
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1074) }) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1075)   const {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1076)     useState,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1077)     useEffect
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1078)   } = React;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1079)   const [processedContent, setProcessedContent] = useState('');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1080)   const [isLoading, setIsLoading] = useState(false);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1081) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1082)   // Simple LaTeX to HTML converter for basic preview
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1083)   const processLaTeX = latex => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1084)     setIsLoading(true);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1085) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1086)     // Basic LaTeX processing - this is a simplified version
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1087)     let html = latex;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1088) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1089)     // Document structure
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1090)     html = html.replace(/\\documentclass\{[^}]+\}/, '');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1091)     html = html.replace(/\\usepackage(?:\[[^\]]*\])?\{[^}]+\}/g, '');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1092)     html = html.replace(/\\title\{([^}]+)\}/, '<h1 class="title">$1</h1>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1093)     html = html.replace(/\\author\{([^}]+)\}/, '<p class="author">By: $1</p>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1094)     html = html.replace(/\\date\{([^}]+)\}/, '<p class="date">$1</p>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1095)     html = html.replace(/\\maketitle/, '<div class="titlepage"></div>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1096) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1097)     // Sections
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1098)     html = html.replace(/\\section\{([^}]+)\}/g, '<h2>$1</h2>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1099)     html = html.replace(/\\subsection\{([^}]+)\}/g, '<h3>$1</h3>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1100)     html = html.replace(/\\subsubsection\{([^}]+)\}/g, '<h4>$1</h4>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1101) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1102)     // Math environments
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1103)     html = html.replace(/\\begin\{equation\}([\s\S]*?)\\end\{equation\}/g, '<div class="equation">$$1$</div>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1104)     html = html.replace(/\$([^$]+)\$/g, '<span class="math">$1</span>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1105) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1106)     // Lists
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1107)     html = html.replace(/\\begin\{itemize\}([\s\S]*?)\\end\{itemize\}/g, (match, content) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1108)       const items = content.replace(/\\item\s+/g, '<li>').split('<li>').filter(item => item.trim());
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1109)       return '<ul>' + items.map(item => '<li>' + item.trim() + '</li>').join('') + '</ul>';
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1110)     });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1111)     html = html.replace(/\\begin\{enumerate\}([\s\S]*?)\\end\{enumerate\}/g, (match, content) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1112)       const items = content.replace(/\\item\s+/g, '<li>').split('<li>').filter(item => item.trim());
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1113)       return '<ol>' + items.map(item => '<li>' + item.trim() + '</li>').join('') + '</ol>';
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1114)     });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1115) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1116)     // Text formatting
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1117)     html = html.replace(/\\textbf\{([^}]+)\}/g, '<strong>$1</strong>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1118)     html = html.replace(/\\textit\{([^}]+)\}/g, '<em>$1</em>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1119)     html = html.replace(/\\emph\{([^}]+)\}/g, '<em>$1</em>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1120) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1121)     // Clean up LaTeX commands and environments
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1122)     html = html.replace(/\\begin\{document\}/, '');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1123)     html = html.replace(/\\end\{document\}/, '');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1124)     html = html.replace(/\\[a-zA-Z]+(?:\[[^\]]*\])?\{[^}]*\}/g, '');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1125)     html = html.replace(/\\[a-zA-Z]+/g, '');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1126) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1127)     // Convert line breaks
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1128)     html = html.replace(/\n\s*\n/g, '</p><p>');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1129)     html = '<p>' + html + '</p>';
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1130)     html = html.replace(/<p>\s*<\/p>/g, '');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1131)     setProcessedContent(html);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1132)     setIsLoading(false);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1133)   };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1134)   useEffect(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1135)     const timeoutId = setTimeout(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1136)       processLaTeX(latexCode);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1137)     }, 500); // Debounce processing
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1138) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1139)     return () => clearTimeout(timeoutId);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1140)   }, [latexCode]);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1141)   if (isLoading) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1142)     return React.createElement('div', {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1143)       className: 'loading'
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1144)     }, 'Processing LaTeX...');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1145)   }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1146)   return React.createElement('div', {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1147)     className: 'preview-content'
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1148)   }, React.createElement('div', {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1149)     dangerouslySetInnerHTML: {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1150)       __html: processedContent
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1151)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1152)   }), React.createElement('style', null, `
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1153)             .preview-content h1.title {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1154)                 text-align: center;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1155)                 margin-bottom: 10px;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1156)                 font-size: 24px;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1157)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1158)             .preview-content .author, .preview-content .date {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1159)                 text-align: center;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1160)                 margin: 5px 0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1161)                 color: #666;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1162)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1163)             .preview-content h2 {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1164)                 margin: 20px 0 10px 0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1165)                 color: #333;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1166)                 border-bottom: 1px solid #ddd;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1167)                 padding-bottom: 5px;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1168)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1169)             .preview-content h3 {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1170)                 margin: 15px 0 8px 0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1171)                 color: #444;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1172)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1173)             .preview-content h4 {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1174)                 margin: 12px 0 6px 0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1175)                 color: #555;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1176)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1177)             .preview-content p {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1178)                 margin: 10px 0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1179)                 line-height: 1.6;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1180)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1181)             .preview-content .equation {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1182)                 text-align: center;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1183)                 margin: 20px 0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1184)                 padding: 10px;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1185)                 background: #f8f9fa;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1186)                 border-left: 4px solid #007bff;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1187)                 font-family: 'Times New Roman', serif;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1188)                 font-style: italic;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1189)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1190)             .preview-content .math {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1191)                 font-family: 'Times New Roman', serif;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1192)                 font-style: italic;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1193)                 background: #f0f0f0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1194)                 padding: 2px 4px;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1195)                 border-radius: 3px;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1196)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1197)             .preview-content ul, .preview-content ol {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1198)                 margin: 10px 0 10px 20px;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1199)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1200)             .preview-content li {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1201)                 margin: 5px 0;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1202)             }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1203)         `));
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1204) };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1205) /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PreviewPane);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1206) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1207) /***/ }),
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1208) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1209) /***/ "./src/Toolbar.js":
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1210) /*!************************!*\
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1211)   !*** ./src/Toolbar.js ***!
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1212)   \************************/
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1213) /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1214) 
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1215) "use strict";
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1216) __webpack_require__.r(__webpack_exports__);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1217) /* harmony export */ __webpack_require__.d(__webpack_exports__, {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1218) /* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1219) /* harmony export */ });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1220) const Toolbar = ({
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1221)   viewMode,
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1222)   onViewModeChange,
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1223)   latexCode,
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1224)   onCompile,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1225)   pdfUrl,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1226)   theme,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1227)   onToggleTheme
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1228) }) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1229)   const handleDownload = () => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1230)     const blob = new Blob([latexCode], {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1231)       type: "text/plain"
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1232)     });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1233)     const url = URL.createObjectURL(blob);
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1234)     const a = document.createElement("a");
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1235)     a.href = url;
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1236)     a.download = "document.tex";
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1237)     document.body.appendChild(a);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1238)     a.click();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1239)     document.body.removeChild(a);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1240)     URL.revokeObjectURL(url);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1241)   };
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1242)   // handler for downloading the pdf
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1243)   const handleDownloadPDF = () => {
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1244)     if (!pdfUrl) {
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1245)       alert("No compiled PDF available. Please compile first.");
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1246)       return;
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1247)     }
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1248)     const a = document.createElement("a");
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1249)     a.href = pdfUrl;
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1250)     a.download = "document.pdf";
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1251)     document.body.appendChild(a);
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1252)     a.click();
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1253)     document.body.removeChild(a);
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1254)   };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1255)   const handleClear = () => {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1256)     if (confirm("Are you sure you want to clear the editor?")) {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1257)       onViewModeChange("editor");
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1258)       // This will be handled by the parent component
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1259)       const event = new CustomEvent("clearEditor");
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1260)       window.dispatchEvent(event);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1261)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1262)   };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1263) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1264)   // Debug helpers - log button clicks
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1265)   const handleViewClick = mode => {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1266)     console.log("[Toolbar] button click ->", mode);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1267)     onViewModeChange(mode);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1268)   };
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1269)   return React.createElement("div", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1270)     className: "toolbar"
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1271)   }, React.createElement("h1", null, "LaTeX Editor"), React.createElement("div", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1272)     className: "toolbar-buttons"
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1273)   }, React.createElement("button", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1274)     className: `btn ${viewMode === "editor" ? "btn-primary" : "btn-secondary"}`,
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1275)     onClick: () => handleViewClick("editor")
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1276)   }, "Editor"), React.createElement("button", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1277)     className: `btn ${viewMode === "split" ? "btn-primary" : "btn-secondary"}`,
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1278)     onClick: () => handleViewClick("split")
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1279)   }, "Split"), React.createElement("button", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1280)     className: `btn ${viewMode === "preview" ? "btn-primary" : "btn-secondary"}`,
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1281)     onClick: () => handleViewClick("preview")
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1282)   }, "Preview"), React.createElement("button", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1283)     className: "btn btn-secondary",
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1284)     onClick: handleDownload
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1285)   }, "Download"),
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1286)   // add button for compilation
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1287)   React.createElement("button", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1288)     className: "btn btn-primary",
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1289)     onClick: onCompile
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1290)   }, "Compile to PDF"), React.createElement("button", {
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1291)     className: "btn btn-secondary",
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1292)     onClick: handleDownloadPDF,
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1293)     // button will start disabled since you don't
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1294)     // want to download a pdf that doesn't exist
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1295)     disabled: !pdfUrl
c70f3fc3 (Robby Lawrence 2025-10-29 23:34:34 -0400 1296)   }, "Download PDF"), React.createElement("button", {
a2953e6a (Robby Lawrence 2025-10-28 21:30:40 -0400 1297)     className: "btn btn-secondary",
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1298)     onClick: handleClear
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1299)   }, "Clear"), React.createElement("button", {
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1300)     className: `btn ${theme === "dark" ? "btn-primary" : "btn-secondary"}`,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1301)     onClick: onToggleTheme,
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1302)     title: "Toggle light/dark theme"
5c8a19eb (Brett Dowling  2025-10-30 16:00:55 -0400 1303)   }, theme === "dark" ? "Light" : "Dark")));
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1304) };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1305) /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Toolbar);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1306) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1307) /***/ })
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1308) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1309) /******/ 	});
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1310) /************************************************************************/
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1311) /******/ 	// The module cache
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1312) /******/ 	var __webpack_module_cache__ = {};
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1313) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1314) /******/ 	// The require function
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1315) /******/ 	function __webpack_require__(moduleId) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1316) /******/ 		// Check if module is in cache
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1317) /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1318) /******/ 		if (cachedModule !== undefined) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1319) /******/ 			return cachedModule.exports;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1320) /******/ 		}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1321) /******/ 		// Create a new module (and put it into the cache)
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1322) /******/ 		var module = __webpack_module_cache__[moduleId] = {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1323) /******/ 			// no module.id needed
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1324) /******/ 			// no module.loaded needed
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1325) /******/ 			exports: {}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1326) /******/ 		};
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1327) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1328) /******/ 		// Execute the module function
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1329) /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1330) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1331) /******/ 		// Return the exports of the module
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1332) /******/ 		return module.exports;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1333) /******/ 	}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1334) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1335) /************************************************************************/
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1336) /******/ 	/* webpack/runtime/compat get default export */
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1337) /******/ 	(() => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1338) /******/ 		// getDefaultExport function for compatibility with non-harmony modules
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1339) /******/ 		__webpack_require__.n = (module) => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1340) /******/ 			var getter = module && module.__esModule ?
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1341) /******/ 				() => (module['default']) :
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1342) /******/ 				() => (module);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1343) /******/ 			__webpack_require__.d(getter, { a: getter });
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1344) /******/ 			return getter;
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1345) /******/ 		};
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1346) /******/ 	})();
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1347) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1348) /******/ 	/* webpack/runtime/define property getters */
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1349) /******/ 	(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1350) /******/ 		// define getter functions for harmony exports
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1351) /******/ 		__webpack_require__.d = (exports, definition) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1352) /******/ 			for(var key in definition) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1353) /******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1354) /******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1355) /******/ 				}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1356) /******/ 			}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1357) /******/ 		};
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1358) /******/ 	})();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1359) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1360) /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1361) /******/ 	(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1362) /******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1363) /******/ 	})();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1364) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1365) /******/ 	/* webpack/runtime/make namespace object */
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1366) /******/ 	(() => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1367) /******/ 		// define __esModule on exports
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1368) /******/ 		__webpack_require__.r = (exports) => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1369) /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1370) /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1371) /******/ 			}
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1372) /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1373) /******/ 		};
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1374) /******/ 	})();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1375) /******/ 	
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1376) /************************************************************************/
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1377) var __webpack_exports__ = {};
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1378) // This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1379) (() => {
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1380) "use strict";
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1381) /*!**********************!*\
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1382)   !*** ./src/index.js ***!
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1383)   \**********************/
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1384) __webpack_require__.r(__webpack_exports__);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1385) /* harmony import */ var _Toolbar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Toolbar.js */ "./src/Toolbar.js");
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1386) /* harmony import */ var _LaTeXEditor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LaTeXEditor.js */ "./src/LaTeXEditor.js");
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1387) /* harmony import */ var _PreviewPane_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PreviewPane.js */ "./src/PreviewPane.js");
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1388) /* harmony import */ var _App_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./App.js */ "./src/App.js");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1389) /* harmony import */ var _Collaborative_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Collaborative.js */ "./src/Collaborative.js");
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1390) /* harmony import */ var _Collaborative_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Collaborative_js__WEBPACK_IMPORTED_MODULE_4__);
12b1526b (pau1davis      2025-10-28 16:00:33 -0400 1391) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1392) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1393) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1394) 
d1c7121e (pau1davis      2025-10-28 21:05:11 -0400 1395) // Import Collaborative features
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1396) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1397) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1398) // Make components available globally for backward compatibility
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1399) window.Toolbar = _Toolbar_js__WEBPACK_IMPORTED_MODULE_0__["default"];
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1400) window.LaTeXEditor = _LaTeXEditor_js__WEBPACK_IMPORTED_MODULE_1__["default"];
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1401) window.PreviewPane = _PreviewPane_js__WEBPACK_IMPORTED_MODULE_2__["default"];
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1402) window.App = _App_js__WEBPACK_IMPORTED_MODULE_3__["default"];
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1403) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1404) // Function to initialize the app
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1405) const initializeApp = () => {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1406)   try {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1407)     // Wait for React to be available
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1408)     if (typeof React !== 'undefined' && typeof ReactDOM !== 'undefined') {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1409)       const root = ReactDOM.createRoot(document.getElementById('root'));
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1410)       root.render(React.createElement(_App_js__WEBPACK_IMPORTED_MODULE_3__["default"]));
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1411)     } else {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1412)       console.error('React or ReactDOM not loaded');
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1413)     }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1414)   } catch (error) {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1415)     console.error('Error loading app:', error);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1416)     document.getElementById('root').innerHTML = `
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1417)             <div style="padding: 20px; text-align: center; color: red;">
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1418)                 <h2>Error Loading Editor</h2>
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1419)                 <p>There was an error loading the LaTeX editor. Please check the console for details.</p>
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1420)             </div>
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1421)         `;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1422)   }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1423) };
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1424) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1425) // Initialize when DOM is ready
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1426) if (document.readyState === 'loading') {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1427)   document.addEventListener('DOMContentLoaded', initializeApp);
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1428) } else {
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1429)   initializeApp();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1430) }
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1431) })();
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1432) 
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1433) /******/ })()
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1434) ;
20cb152f (Ferrari        2025-10-16 10:55:48 -0400 1435) //# sourceMappingURL=bundle.js.map

===== editor/dist/bundle.js.map =====
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 1) {"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://underbranch-editor/./src/App.js","webpack://underbranch-editor/./src/Collaborative.js","webpack://underbranch-editor/./src/LaTeXEditor.js","webpack://underbranch-editor/./src/PreviewPane.js","webpack://underbranch-editor/./src/Toolbar.js","webpack://underbranch-editor/webpack/bootstrap","webpack://underbranch-editor/webpack/runtime/compat get default export","webpack://underbranch-editor/webpack/runtime/define property getters","webpack://underbranch-editor/webpack/runtime/hasOwnProperty shorthand","webpack://underbranch-editor/webpack/runtime/make namespace object","webpack://underbranch-editor/./src/index.js"],"sourcesContent":["// Pull React hooks off the global React object. This file assumes React is\r\n// available globally (e.g. via a <script> tag or bundler that provides it).\r\nconst { useState, useEffect } = React;\r\n\r\n// Main application component. This is a small, non-JSX React component that\r\n// uses React.createElement to build the UI. It wires together three pieces:\r\n// - Toolbar: lets the user switch view modes and perform actions\r\n// - LaTeXEditor: an editor component for editing LaTeX source\r\n// - PreviewPane: renders the LaTeX source as HTML or a preview\r\nconst App = () => {\r\n    // latexCode holds the current LaTeX source the user is editing. We\r\n    // initialize it with a small sample document so the preview shows\r\n    // something on first load.\r\n    const [latexCode, setLatexCode] = useState(`\\\\documentclass{article}\r\n\\\\usepackage[utf8]{inputenc}\r\n\\\\title{My LaTeX Document}\r\n\\\\author{Author Name}\r\n\\\\date{\\\\today}\r\n\r\n\\\\begin{document}\r\n\r\n\\\\maketitle\r\n\r\n\\\\section{Introduction}\r\nThis is a sample LaTeX document. You can edit this text in the editor.\r\n\r\n\\\\section{Mathematical Equations}\r\nHere's a mathematical equation:\r\n\\\\begin{equation}\r\nE = mc^2\r\n\\\\end{equation}\r\n\r\nAnd an inline equation: $\\\\alpha + \\\\beta = \\\\gamma$\r\n\r\n\\\\subsection{More Examples}\r\n\\\\begin{itemize}\r\n\\\\item First item\r\n\\\\item Second item\r\n\\\\item Third item\r\n\\\\end{itemize}\r\n\r\n\\\\end{document}`);\r\n\r\n    // viewMode controls which panes are visible. Possible values:\r\n    // - 'editor'  -> only the editor is shown\r\n    // - 'preview' -> only the preview is shown\r\n    // - 'split'   -> both are shown side-by-side\r\n    const [viewMode, setViewMode] = useState(\"split\"); // 'editor', 'preview', 'split'\r\n    const [pdfUrl, setPdfUrl] = useState(null);\r\n    \r\n    // Theme state: 'light' or 'dark'. Persist to localStorage and prefer\r\n    // the user's system preference when no saved preference exists.\r\n    const [theme, setTheme] = useState(() => {\r\n        try {\r\n            const saved = localStorage.getItem(\"ub_theme\");\r\n            if (saved) return saved;\r\n            const prefersDark = window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n            return prefersDark ? \"dark\" : \"light\";\r\n        } catch (e) {\r\n            return \"light\";\r\n        }\r\n    });\r\n    \r\n    \r\n    // handleCodeChange is passed to the editor component. It receives the\r\n    // new text value and updates the latexCode state. We guard against\r\n    // undefined/null by falling back to an empty string.\r\n    const handleCodeChange = (value) => {\r\n        setLatexCode(value || \"\");\r\n    };\r\n    // handle compilation\r\n    const handleCompile = async () => {\r\n        try {\r\n            const res = await fetch(\"/compile/\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ latex: latexCode }),\r\n            });\r\n\r\n            if (!res.ok) {\r\n                const errText = await res.text();\r\n                alert(\"Compilation error: server is likely down\");\r\n                return;\r\n            }\r\n\r\n            const blob = await res.blob();\r\n            const url = URL.createObjectURL(blob) + `#${Date.now()}`;\r\n            // clean up old blobs\r\n            setPdfUrl((prevUrl) => {\r\n                if (prevUrl) URL.revokeObjectURL(prevUrl);\r\n                return url;\r\n            });\r\n        } catch (err) {\r\n            alert(\"Network or server error: \" + err.message);\r\n        }\r\n    };\r\n\r\n    // Debug: log viewMode transitions so we can trace state changes while\r\n    // reproducing the issue in the browser console.\r\n    useEffect(() => {\r\n        console.log(\"[App] viewMode changed ->\", viewMode);\r\n        // Also update the document title so the current mode is visible\r\n        // in the browser tab (easy to spot without opening devtools).\r\n        try {\r\n            document.title = `LaTeX Editor ΓÇö ${viewMode}`;\r\n        } catch (e) {\r\n            // ignore (server side or non-browser env)\r\n        }\r\n        // Trigger a resize event to nudge layout systems (Monaco, CSS)\r\n        // to recompute sizes when the view mode changes.\r\n        try {\r\n            window.dispatchEvent(new Event(\"resize\"));\r\n        } catch (e) {\r\n            // ignore in non-browser environments\r\n        }\r\n    }, [viewMode]);\r\n\r\n    \r\n    // Apply theme to document root and persist choice\r\n    useEffect(() => {\r\n        try {\r\n            document.documentElement.setAttribute(\"data-theme\", theme);\r\n            localStorage.setItem(\"ub_theme\", theme);\r\n        } catch (e) {\r\n            // ignore when not in browser\r\n        }\r\n    }, [theme]);\r\n\r\n\r\n    // The UI layout is built with React.createElement calls instead of JSX.\r\n    // To avoid layout glitches when switching modes we render both panes\r\n    // consistently and toggle their visibility/size using explicit CSS\r\n    // class names: 'split', 'full', or 'hidden'. This prevents frequent\r\n    // unmount/remount of the editor which can cause Monaco/DOM layout issues.\r\n    const editorClass =\r\n        viewMode === \"split\"\r\n            ? \"split\"\r\n            : viewMode === \"editor\"\r\n              ? \"full\"\r\n              : \"hidden\";\r\n    const previewClass =\r\n        viewMode === \"split\"\r\n            ? \"split\"\r\n            : viewMode === \"preview\"\r\n              ? \"full\"\r\n              : \"hidden\";\r\n\r\n    const editorVisible = viewMode === \"split\" || viewMode === \"editor\";\r\n    const previewVisible = viewMode === \"split\" || viewMode === \"preview\";\r\n\r\n    return React.createElement(\r\n        \"div\",\r\n        { className: \"app\" },\r\n        React.createElement(Toolbar, {\r\n            viewMode: viewMode,\r\n            onViewModeChange: setViewMode,\r\n            latexCode: latexCode,\r\n            // add compilation handler\r\n            onCompile: handleCompile,\r\n            // i want the user to be able to download the pdf\r\n            // - robby\r\n            pdfUrl: pdfUrl,\r\n            theme: theme,\r\n            onToggleTheme: () =>setTheme((t) => (t === \"light\" ? \"dark\" : \"light\")),\r\n        }),\r\n\r\n        React.createElement(\r\n            \"div\",\r\n            { className: `editor-container mode-${viewMode}` },\r\n            // Editor pane is always present but may be hidden via the\r\n            // 'hidden' class. This keeps Monaco mounted and stable.\r\n            React.createElement(\r\n                \"div\",\r\n                {\r\n                    className: `editor-pane ${editorClass}`,\r\n                },\r\n                React.createElement(LaTeXEditor, {\r\n                    value: latexCode,\r\n                    onChange: handleCodeChange,\r\n                    isVisible: editorVisible,\r\n                    theme: theme,\r\n                }),\r\n            ),\r\n\r\n            // Preview pane is always present as well; it will be hidden\r\n            // when not in 'preview' or 'split' modes.\r\n            React.createElement(\r\n                \"div\",\r\n                { className: `preview-pane ${previewClass}` },\r\n                pdfUrl\r\n                    ? React.createElement(\"iframe\", {\r\n                          src: pdfUrl,\r\n                          style: {\r\n                              width: \"100%\",\r\n                              height: \"100%\",\r\n                              border: \"none\",\r\n                          },\r\n                          title: \"PDF Preview\",\r\n                      })\r\n                    : React.createElement(\r\n                          \"div\",\r\n                          { className: \"loading\" },\r\n                          \"No PDF yet\",\r\n                      ),\r\n            ),\r\n        ),\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// Collaborative features integration for the LaTeX Editor\r\n// This module handles real-time collaboration via Socket\r\n\r\nclass Collaborative {\r\n    constructor() {\r\n        this.socket = null;\r\n        this.editor = null;\r\n        this.app = null;\r\n        this.users = [];\r\n        this.currentUser = null;\r\n        this.currentRoom = null;\r\n        this.isUpdatingFromRemote = false;\r\n        this.decorations = [];\r\n\r\n        this.init();\r\n    }\r\n\r\n    async init() {\r\n        console.log(\"Starting collaborative initialization...\");\r\n\r\n        // Wait for Socket.IO to be available\r\n        console.log(\"Waiting for Socket.IO...\");\r\n        await this.waitForSocketIO();\r\n        console.log(\"Socket.IO ready\");\r\n\r\n        // Initialize socket connection\r\n        console.log(\"Initializing socket connection...\");\r\n        this.initSocket();\r\n\r\n        // Get user info and join\r\n        console.log(\"Getting user info...\");\r\n        await this.getUserInfo();\r\n\r\n        // Wait for the React app and Monaco editor\r\n        console.log(\"Waiting for Monaco editor...\");\r\n        await this.waitForEditor();\r\n        console.log(\"Monaco editor found!\");\r\n\r\n        // Setup collaborative features\r\n        console.log(\"Setting up collaboration...\");\r\n        this.setupCollaboration();\r\n\r\n        console.log(\"Collaborative features initialized!\");\r\n    }\r\n\r\n    waitForSocketIO() {\r\n        return new Promise((resolve) => {\r\n            const checkSocketIO = () => {\r\n                if (window.io) {\r\n                    resolve();\r\n                } else {\r\n                    setTimeout(checkSocketIO, 100);\r\n                }\r\n            };\r\n            checkSocketIO();\r\n        });\r\n    }\r\n\r\n    initSocket() {\r\n        this.socket = io();\r\n\r\n        this.socket.on(\"connect\", () => {\r\n            console.log(\"Connected to collaboration server\");\r\n        });\r\n\r\n        this.socket.on(\"disconnect\", () => {\r\n            console.log(\"Disconnected from collaboration server\");\r\n        });\r\n\r\n        this.socket.on(\"document-update\", (data) => {\r\n            console.log(\"Received document update from\", data.userId);\r\n            this.handleRemoteUpdate(data);\r\n        });\r\n\r\n        this.socket.on(\"users-update\", (users) => {\r\n            console.log(\"Users list updated:\", users.length, \"users\");\r\n            this.users = users;\r\n            this.updateUsersList();\r\n        });\r\n\r\n        this.socket.on(\"cursor-update\", (data) => {\r\n            this.handleCursorUpdate(data);\r\n        });\r\n\r\n        this.socket.on(\"room-joined\", (data) => {\r\n            console.log(\"Successfully joined room:\", data.roomId);\r\n            this.currentRoom = data.roomId;\r\n            this.updateDocumentContent(data.content);\r\n            this.users = data.users;\r\n            this.updateUsersList();\r\n\r\n            // Show success message\r\n            this.showMessage(\r\n                `Joined room: ${data.roomId}${data.isPasswordProtected ? \" (password protected)\" : \"\"}`,\r\n                \"success\",\r\n            );\r\n        });\r\n\r\n        this.socket.on(\"room-join-error\", (data) => {\r\n            console.error(\"Γ¥î Failed to join room:\", data.message);\r\n\r\n            if (data.error === \"invalid-password\") {\r\n                alert(`Γ¥î ${data.message}\\n\\nPlease try again.`);\r\n                setTimeout(() => this.promptForRoom(), 100);\r\n            } else if (data.error === \"room-not-found\") {\r\n                const createRoom = confirm(\r\n                    `Γ¥î Room does not exist.\\n\\nWould you like to create it?`,\r\n                );\r\n                if (createRoom) {\r\n                    const password = prompt(\r\n                        `Set a password for the new room (or leave empty for no password):`,\r\n                    );\r\n                    this.joinRoom(this.currentRoom, password, true);\r\n                } else {\r\n                    setTimeout(() => this.promptForRoom(), 100);\r\n                }\r\n            } else if (data.error === \"room-already-exists\") {\r\n                alert(`Γ¥î ${data.message}`);\r\n                setTimeout(() => this.promptForRoom(), 100);\r\n            }\r\n        });\r\n\r\n        this.socket.on(\"room-check-result\", (data) => {\r\n            if (data.exists) {\r\n                if (data.isPasswordProtected) {\r\n                    // Room exists and is password protected\r\n                    const password = prompt(\r\n                        `Room \"${data.roomId}\" exists and is password protected.\\nEnter password:`,\r\n                    );\r\n                    this.joinRoom(data.roomId, password, false);\r\n                } else {\r\n                    // Room exists and is public\r\n                    this.joinRoom(data.roomId, null, false);\r\n                }\r\n            } else {\r\n                // Room doesn't exist - ask if they want to create it\r\n                const createRoom = confirm(\r\n                    `Room \"${data.roomId}\" doesn't exist.\\nWould you like to create it?`,\r\n                );\r\n                if (createRoom) {\r\n                    const password = prompt(\r\n                        `Set a password for the new room \"${data.roomId}\" (or leave empty for no password):`,\r\n                    );\r\n                    this.joinRoom(data.roomId, password, true);\r\n                } else {\r\n                    setTimeout(() => this.promptForRoom(), 100);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    async getUserInfo() {\r\n        // Check if user info is stored in localStorage\r\n        let userName = localStorage.getItem(\"collaborativeUserName\");\r\n        let userColor = localStorage.getItem(\"collaborativeUserColor\");\r\n\r\n        if (!userName) {\r\n            userName =\r\n                prompt(\"Enter your name for collaborative editing:\") ||\r\n                `User ${Date.now()}`;\r\n            localStorage.setItem(\"collaborativeUserName\", userName);\r\n        }\r\n\r\n        if (!userColor) {\r\n            userColor = this.getRandomColor();\r\n            localStorage.setItem(\"collaborativeUserColor\", userColor);\r\n        }\r\n\r\n        this.currentUser = {\r\n            name: userName,\r\n            color: userColor,\r\n        };\r\n\r\n        // Prompt for room\r\n        await this.promptForRoom();\r\n    }\r\n\r\n    async promptForRoom() {\r\n        const roomId =\r\n            prompt('Enter room name to join (or leave empty for \"general\"):') ||\r\n            \"general\";\r\n\r\n        if (roomId === \"general\") {\r\n            // General room is always accessible without password\r\n            this.joinRoom(roomId, null, true); // Always \"create\" general room to ensure it exists\r\n            return;\r\n        }\r\n\r\n        // Check if room exists first\r\n        this.checkRoomExists(roomId);\r\n    }\r\n\r\n    checkRoomExists(roomId) {\r\n        console.log(`Checking if room \"${roomId}\" exists...`);\r\n        this.socket.emit(\"check-room\", { roomId });\r\n    }\r\n\r\n    joinRoom(roomId, password, createRoom) {\r\n        this.currentRoom = roomId;\r\n\r\n        this.socket.emit(\"join-room\", {\r\n            roomId: roomId,\r\n            userData: this.currentUser,\r\n            password: password,\r\n            createRoom: createRoom,\r\n        });\r\n    }\r\n\r\n    waitForEditor() {\r\n        return new Promise((resolve) => {\r\n            const checkEditor = () => {\r\n                console.log(\"Looking for Monaco editor...\");\r\n\r\n                // Look for Monaco editor in multiple ways\r\n                const editorElement = document.getElementById(\"monaco-editor\");\r\n                console.log(\"Editor element found:\", !!editorElement);\r\n\r\n                if (window.monaco) {\r\n                    console.log(\"Monaco global available\");\r\n\r\n                    // Try to get editor from the element\r\n                    if (editorElement && editorElement._monacoEditor) {\r\n                        console.log(\"Found editor on element._monacoEditor\");\r\n                        this.editor = editorElement._monacoEditor;\r\n                        resolve();\r\n                        return;\r\n                    }\r\n\r\n                    // Try to get all editors from Monaco\r\n                    const editors = window.monaco.editor.getEditors();\r\n                    if (editors.length > 0) {\r\n                        console.log(\r\n                            \"Found editor via monaco.editor.getEditors():\",\r\n                            editors.length,\r\n                        );\r\n                        this.editor = editors[0];\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                } else {\r\n                    console.log(\" Monaco global not available yet\");\r\n                }\r\n\r\n                console.log(\"Editor not ready yet, retrying...\");\r\n                setTimeout(checkEditor, 500);\r\n            };\r\n            checkEditor();\r\n        });\r\n    }\r\n\r\n    setupCollaboration() {\r\n        if (!this.editor) {\r\n            console.error(\"Monaco editor not found\");\r\n            return;\r\n        }\r\n\r\n        // Listen for local changes\r\n        this.editor.onDidChangeModelContent((e) => {\r\n            if (!this.isUpdatingFromRemote) {\r\n                const content = this.editor.getValue();\r\n                console.log(\r\n                    \"Local change detected, broadcasting...\",\r\n                    content.length,\r\n                    \"characters\",\r\n                );\r\n                this.socket.emit(\"document-change\", {\r\n                    content: content,\r\n                    changes: e.changes,\r\n                });\r\n            } else {\r\n                console.log(\"Skipping broadcast - change from remote\");\r\n            }\r\n        });\r\n\r\n        // Listen for cursor position changes\r\n        this.editor.onDidChangeCursorPosition((e) => {\r\n            this.socket.emit(\"cursor-update\", {\r\n                lineNumber: e.position.lineNumber,\r\n                column: e.position.column,\r\n            });\r\n        });\r\n\r\n        console.log(\"Editor event listeners setup complete\");\r\n    }\r\n\r\n    updateDocumentContent(content) {\r\n        if (this.editor && this.editor.getValue() !== content) {\r\n            console.log(\r\n                \"Updating editor content from remote...\",\r\n                content.length,\r\n                \"characters\",\r\n            );\r\n            this.isUpdatingFromRemote = true;\r\n            const position = this.editor.getPosition();\r\n            this.editor.setValue(content);\r\n            if (position) {\r\n                this.editor.setPosition(position);\r\n            }\r\n            this.isUpdatingFromRemote = false;\r\n            console.log(\"Editor content updated successfully\");\r\n        } else {\r\n            console.log(\"Content already up to date, skipping update\");\r\n        }\r\n    }\r\n\r\n    handleRemoteUpdate(data) {\r\n        console.log(\"Received remote update from\", data.userId);\r\n        this.updateDocumentContent(data.content);\r\n    }\r\n\r\n    handleCursorUpdate(data) {\r\n        if (!this.editor) return;\r\n\r\n        // Remove old decorations for this user\r\n        const oldDecorations = this.decorations.filter(\r\n            (d) => d.userId === data.userId,\r\n        );\r\n        if (oldDecorations.length > 0) {\r\n            this.editor.deltaDecorations(\r\n                oldDecorations.map((d) => d.id),\r\n                [],\r\n            );\r\n        }\r\n\r\n        // Add new cursor decoration\r\n        const decoration = {\r\n            range: new monaco.Range(\r\n                data.cursor.lineNumber,\r\n                data.cursor.column,\r\n                data.cursor.lineNumber,\r\n                data.cursor.column + 1,\r\n            ),\r\n            options: {\r\n                className: \"collaborative-cursor\",\r\n                stickiness:\r\n                    monaco.editor.TrackedRangeStickiness\r\n                        .NeverGrowsWhenTypingAtEdges,\r\n                hoverMessage: { value: `${data.user.name}'s cursor` },\r\n                after: {\r\n                    content: `${data.user.name}`,\r\n                    inlineClassName: \"collaborative-cursor-label\",\r\n                    color: data.user.color,\r\n                },\r\n            },\r\n        };\r\n\r\n        const decorationIds = this.editor.deltaDecorations([], [decoration]);\r\n\r\n        // Store decoration info\r\n        this.decorations = this.decorations.filter(\r\n            (d) => d.userId !== data.userId,\r\n        );\r\n        this.decorations.push({\r\n            userId: data.userId,\r\n            id: decorationIds[0],\r\n        });\r\n    }\r\n\r\n    updateUsersList() {\r\n        // Create or update users list UI\r\n        this.createUsersListUI();\r\n    }\r\n\r\n    createUsersListUI() {\r\n        // Remove existing users list\r\n        const existingList = document.getElementById(\"collaborative-users\");\r\n        if (existingList) {\r\n            existingList.remove();\r\n        }\r\n\r\n        // Create new users list\r\n        const usersList = document.createElement(\"div\");\r\n        usersList.id = \"collaborative-users\";\r\n        usersList.style.cssText = `\r\n            position: fixed;\r\n            top: 60px;\r\n            right: 20px;\r\n            background: white;\r\n            border: 1px solid #ddd;\r\n            border-radius: 8px;\r\n            padding: 12px;\r\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n            z-index: 1000;\r\n            max-width: 220px;\r\n        `;\r\n\r\n        // Room info\r\n        const roomInfo = document.createElement(\"div\");\r\n        roomInfo.style.cssText = `\r\n            background: #f8f9fa;\r\n            padding: 8px;\r\n            border-radius: 4px;\r\n            margin-bottom: 12px;\r\n            border-left: 3px solid #4834D4;\r\n        `;\r\n\r\n        const roomTitle = document.createElement(\"div\");\r\n        roomTitle.textContent = `Room: ${this.currentRoom || \"Not connected\"}`;\r\n        roomTitle.style.cssText = `\r\n            font-weight: bold;\r\n            color: #333;\r\n            font-size: 13px;\r\n            margin-bottom: 4px;\r\n        `;\r\n\r\n        const switchButton = document.createElement(\"button\");\r\n        switchButton.textContent = \"Switch Room\";\r\n        switchButton.style.cssText = `\r\n            background: #4834D4;\r\n            color: white;\r\n            border: none;\r\n            padding: 4px 8px;\r\n            border-radius: 3px;\r\n            font-size: 11px;\r\n            cursor: pointer;\r\n        `;\r\n        switchButton.onclick = () => this.promptForRoom();\r\n\r\n        roomInfo.appendChild(roomTitle);\r\n        roomInfo.appendChild(switchButton);\r\n        usersList.appendChild(roomInfo);\r\n\r\n        // Users title\r\n        const title = document.createElement(\"div\");\r\n        title.textContent = `Online Users (${this.users.length})`;\r\n        title.style.cssText = `\r\n            font-weight: bold;\r\n            margin-bottom: 8px;\r\n            color: #333;\r\n            font-size: 14px;\r\n        `;\r\n        usersList.appendChild(title);\r\n\r\n        // Users list\r\n        this.users.forEach((user) => {\r\n            const userElement = document.createElement(\"div\");\r\n            userElement.style.cssText = `\r\n                display: flex;\r\n                align-items: center;\r\n                margin-bottom: 6px;\r\n                font-size: 13px;\r\n            `;\r\n\r\n            const colorDot = document.createElement(\"div\");\r\n            colorDot.style.cssText = `\r\n                width: 12px;\r\n                height: 12px;\r\n                background-color: ${user.color};\r\n                border-radius: 50%;\r\n                margin-right: 8px;\r\n            `;\r\n\r\n            const nameElement = document.createElement(\"span\");\r\n            nameElement.textContent = user.name;\r\n            nameElement.style.color = \"#555\";\r\n\r\n            userElement.appendChild(colorDot);\r\n            userElement.appendChild(nameElement);\r\n            usersList.appendChild(userElement);\r\n        });\r\n\r\n        document.body.appendChild(usersList);\r\n    }\r\n\r\n    getRandomColor() {\r\n        const colors = [\r\n            \"#FF6B6B\",\r\n            \"#4ECDC4\",\r\n            \"#45B7D1\",\r\n            \"#96CEB4\",\r\n            \"#FECA57\",\r\n            \"#FF9FF3\",\r\n            \"#54A0FF\",\r\n            \"#5F27CD\",\r\n            \"#00D2D3\",\r\n            \"#FF9F43\",\r\n        ];\r\n        return colors[Math.floor(Math.random() * colors.length)];\r\n    }\r\n\r\n    showMessage(message, type = \"info\") {\r\n        // Create message element\r\n        const messageDiv = document.createElement(\"div\");\r\n        messageDiv.textContent = message;\r\n        messageDiv.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            padding: 12px 20px;\r\n            border-radius: 6px;\r\n            color: white;\r\n            font-weight: bold;\r\n            z-index: 10000;\r\n            max-width: 300px;\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.3);\r\n            background-color: ${type === \"success\" ? \"#10AC84\" : type === \"error\" ? \"#EE5A24\" : \"#4834D4\"};\r\n        `;\r\n\r\n        document.body.appendChild(messageDiv);\r\n\r\n        // Remove after 4 seconds\r\n        setTimeout(() => {\r\n            if (messageDiv.parentNode) {\r\n                messageDiv.parentNode.removeChild(messageDiv);\r\n            }\r\n        }, 4000);\r\n    }\r\n}\r\n\r\n// CSS for collaborative cursors\r\nconst style = document.createElement(\"style\");\r\nstyle.textContent = `\r\n    .collaborative-cursor {\r\n        border-left: 2px solid !important;\r\n        background-color: rgba(255, 107, 107, 0.2) !important;\r\n    }\r\n\r\n    .collaborative-cursor-label {\r\n        background-color: #FF6B6B;\r\n        color: white;\r\n        padding: 2px 6px;\r\n        border-radius: 3px;\r\n        font-size: 11px;\r\n        position: relative;\r\n        top: -20px;\r\n        white-space: nowrap;\r\n    }\r\n`;\r\ndocument.head.appendChild(style);\r\n\r\n// Initialize when DOM is ready\r\nif (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", () => {\r\n        window.collaborative = new Collaborative();\r\n    });\r\n} else {\r\n    window.collaborative = new Collaborative();\r\n}\r\n\r\n// Make Collaborative available globally\r\nwindow.Collaborative = Collaborative;\r\n","const { useEffect, useRef } = React;\r\n\r\nconst LaTeXEditor = ({ value, onChange, isVisible = true, theme = \"light\" }) => {\r\n    const editorRef = useRef(null);\r\n    const monacoRef = useRef(null);\r\n    const layoutTimeout = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Initialize Monaco Editor\r\n        if (window.require && !monacoRef.current) {\r\n            window.require.config({\r\n                paths: { vs: \"https://unpkg.com/monaco-editor@0.44.0/min/vs\" },\r\n            });\r\n\r\n            window.require([\"vs/editor/editor.main\"], () => {\r\n                if (editorRef.current && !monacoRef.current) {\r\n                    // Configure LaTeX language\r\n                    monaco.languages.register({ id: \"latex\" });\r\n\r\n                    // Define light and dark themes so the editor responds to\r\n                    // the app-level theme toggle. We keep token rules similar\r\n                    // but swap base and color tokens for readability on dark.\r\n                    monaco.editor.defineTheme(\"underbranch-light\", {\r\n                        base: \"vs\",\r\n                        inherit: true,\r\n                        rules: [\r\n                            { token: \"keyword\", foreground: \"B5632D\" },\r\n                            { token: \"string\", foreground: \"218721\" },\r\n                            {\r\n                                token: \"comment\",\r\n                                foreground: \"737373\",\r\n                                fontStyle: \"italic\",\r\n                            },\r\n                            { token: \"bracket\", foreground: \"505050\" },\r\n                        ],\r\n                        colors: {\r\n                            \"editor.background\": \"#FFFFFF\",\r\n                            \"editor.foreground\": \"#333333\",\r\n                            \"editor.lineHighlightBackground\": \"#F5F5F5\",\r\n                            \"editorCursor.foreground\": \"#B5632D\",\r\n                            \"editor.selectionBackground\": \"#E8D3C7\",\r\n                            \"editorLineNumber.foreground\": \"#999999\",\r\n                        },\r\n                    });\r\n\r\n                    monaco.editor.defineTheme(\"underbranch-dark\", {\r\n                        base: \"vs-dark\",\r\n                        inherit: true,\r\n                        rules: [\r\n                            { token: \"keyword\", foreground: \"DCA06B\" },\r\n                            { token: \"string\", foreground: \"78C179\" },\r\n                            {\r\n                                token: \"comment\",\r\n                                foreground: \"94A3B8\",\r\n                                fontStyle: \"italic\",\r\n                            },\r\n                            { token: \"bracket\", foreground: \"9AA6B2\" },\r\n                        ],\r\n                        colors: {\r\n                            // Dark background aligned with page dark vars\r\n                            \"editor.background\": \"#071122\",\r\n                            \"editor.foreground\": \"#E6EEF8\",\r\n                            \"editor.lineHighlightBackground\": \"#0b2230\",\r\n                            \"editorCursor.foreground\": \"#B5632D\",\r\n                            \"editor.selectionBackground\": \"#163246\",\r\n                            \"editorLineNumber.foreground\": \"#6B7280\",\r\n                        },\r\n                    });\r\n\r\n                    // Syntax highlighting\r\n                    monaco.languages.setMonarchTokensProvider(\"latex\", {\r\n                        tokenizer: {\r\n                            root: [\r\n                                [/\\\\[a-zA-Z@]+/, \"keyword\"],\r\n                                [/\\\\begin\\{[^}]+\\}/, \"keyword\"],\r\n                                [/\\\\end\\{[^}]+\\}/, \"keyword\"],\r\n                                [/\\$.*?\\$/, \"string\"],\r\n                                [/\\\\\\(.*?\\\\\\)/, \"string\"],\r\n                                [/\\\\\\[.*?\\\\\\]/, \"string\"],\r\n                                [/%.*$/, \"comment\"],\r\n                                [/\\{/, \"bracket\"],\r\n                                [/\\}/, \"bracket\"],\r\n                            ],\r\n                        },\r\n                    });\r\n\r\n                    // LaTeX command definitions\r\n                    const latexCommands = [\r\n                        {\r\n                            command: \"begin\",\r\n                            insertText: \"begin{$0}\",\r\n                            documentation: \"Begin environment\",\r\n                        },\r\n                        {\r\n                            command: \"end\",\r\n                            insertText: \"end{$0}\",\r\n                            documentation: \"End environment\",\r\n                        },\r\n                        {\r\n                            command: \"textbf\",\r\n                            insertText: \"textbf{$0}\",\r\n                            documentation: \"Bold text\",\r\n                        },\r\n                        {\r\n                            command: \"textit\",\r\n                            insertText: \"textit{$0}\",\r\n                            documentation: \"Italic text\",\r\n                        },\r\n                        {\r\n                            command: \"underline\",\r\n                            insertText: \"underline{$0}\",\r\n                            documentation: \"Underline text\",\r\n                        },\r\n                        {\r\n                            command: \"section\",\r\n                            insertText: \"section{$0}\",\r\n                            documentation: \"Section\",\r\n                        },\r\n                        {\r\n                            command: \"subsection\",\r\n                            insertText: \"subsection{$0}\",\r\n                            documentation: \"Subsection\",\r\n                        },\r\n                        {\r\n                            command: \"subsubsection\",\r\n                            insertText: \"subsubsection{$0}\",\r\n                            documentation: \"Subsubsection\",\r\n                        },\r\n                        {\r\n                            command: \"chapter\",\r\n                            insertText: \"chapter{$0}\",\r\n                            documentation: \"Chapter\",\r\n                        },\r\n                        {\r\n                            command: \"title\",\r\n                            insertText: \"title{$0}\",\r\n                            documentation: \"Document title\",\r\n                        },\r\n                        {\r\n                            command: \"author\",\r\n                            insertText: \"author{$0}\",\r\n                            documentation: \"Document author\",\r\n                        },\r\n                        {\r\n                            command: \"date\",\r\n                            insertText: \"date{$0}\",\r\n                            documentation: \"Document date\",\r\n                        },\r\n                        {\r\n                            command: \"emph\",\r\n                            insertText: \"emph{$0}\",\r\n                            documentation: \"Emphasize text\",\r\n                        },\r\n                        {\r\n                            command: \"frac\",\r\n                            insertText: \"frac{$1}{$2}\",\r\n                            documentation: \"Fraction\",\r\n                        },\r\n                        {\r\n                            command: \"sqrt\",\r\n                            insertText: \"sqrt{$0}\",\r\n                            documentation: \"Square root\",\r\n                        },\r\n                    ];\r\n\r\n                    const latexEnvironments = [\r\n                        \"document\",\r\n                        \"equation\",\r\n                        \"align\",\r\n                        \"itemize\",\r\n                        \"enumerate\",\r\n                        \"figure\",\r\n                        \"table\",\r\n                        \"center\",\r\n                        \"abstract\",\r\n                    ];\r\n\r\n                    // Register completion provider for LaTeX commands\r\n                    monaco.languages.registerCompletionItemProvider(\"latex\", {\r\n                        triggerCharacters: [\"\\\\\", \"{\"],\r\n                        provideCompletionItems: (model, position) => {\r\n                            const lineContent = model.getLineContent(\r\n                                position.lineNumber,\r\n                            );\r\n                            const textBeforeCursor = lineContent.substring(\r\n                                0,\r\n                                position.column - 1,\r\n                            );\r\n\r\n                            // Command completions (after \\)\r\n                            const commandMatch =\r\n                                textBeforeCursor.match(/\\\\([a-zA-Z]*)$/);\r\n                            if (commandMatch) {\r\n                                const partialCommand = commandMatch[1];\r\n                                const textAfterCursor = lineContent.substring(\r\n                                    position.column - 1,\r\n                                );\r\n\r\n                                const suggestions = latexCommands\r\n                                    .filter((cmd) =>\r\n                                        cmd.command.startsWith(partialCommand),\r\n                                    )\r\n                                    .map((cmd) => {\r\n                                        // Check if cursor is inside braces and there's a closing brace\r\n                                        const hasOpenBrace = textBeforeCursor.match(/\\{[^}]*$/);\r\n                                        const hasClosingBrace = hasOpenBrace && textAfterCursor.startsWith('}');\r\n\r\n                                        // If we're inside braces with a closing brace, don't include it in insertText\r\n                                        let insertText = cmd.insertText;\r\n                                        let endColumn = position.column;\r\n\r\n                                        if (hasClosingBrace && insertText.includes('{')) {\r\n                                            // Remove the closing brace from commands like \"textbf{$0}\"\r\n                                            insertText = insertText.replace(/\\{([^}]*)\\}/, '{$1');\r\n                                            endColumn = position.column + 1; // Include the closing brace in replacement\r\n                                        }\r\n\r\n                                        return {\r\n                                            label: cmd.command,\r\n                                            kind: monaco.languages\r\n                                                .CompletionItemKind.Function,\r\n                                            insertText: insertText,\r\n                                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                                            documentation: cmd.documentation,\r\n                                            range: {\r\n                                                startLineNumber:\r\n                                                    position.lineNumber,\r\n                                                startColumn:\r\n                                                    position.column -\r\n                                                    partialCommand.length,\r\n                                                endLineNumber: position.lineNumber,\r\n                                                endColumn: endColumn,\r\n                                            },\r\n                                        };\r\n                                    });\r\n                                return { suggestions };\r\n                            }\r\n\r\n                            // Environment completions (after \\begin{)\r\n                            const beginMatch =\r\n                                textBeforeCursor.match(/\\\\begin\\{([^}]*)$/);\r\n                            if (beginMatch) {\r\n                                const partialEnv = beginMatch[1];\r\n                                const textAfterCursor = lineContent.substring(position.column - 1);\r\n\r\n                                // Check if there's already a closing brace after the cursor\r\n                                const hasClosingBrace = textAfterCursor.startsWith('}');\r\n\r\n                                const suggestions = latexEnvironments\r\n                                    .filter((env) => env.startsWith(partialEnv))\r\n                                    .map((env) => {\r\n                                        // If there's already a closing brace, we need to handle it carefully\r\n                                        let insertText, endColumn;\r\n                                        if (hasClosingBrace) {\r\n                                            // Include the environment content but skip past the existing closing brace\r\n                                            insertText = `${env}}\\n\\t$0\\n\\\\end{${env}}`;\r\n                                            endColumn = position.column + 1; // Replace up to and including the }\r\n                                        } else {\r\n                                            // No closing brace, add everything including the brace\r\n                                            insertText = `${env}}\\n\\t$0\\n\\\\end{${env}}`;\r\n                                            endColumn = position.column;\r\n                                        }\r\n\r\n                                        return {\r\n                                            label: env,\r\n                                            kind: monaco.languages\r\n                                                .CompletionItemKind.Keyword,\r\n                                            insertText: insertText,\r\n                                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                                            documentation: `Insert ${env} environment`,\r\n                                            range: {\r\n                                                startLineNumber:\r\n                                                    position.lineNumber,\r\n                                                startColumn: position.column - partialEnv.length,\r\n                                                endLineNumber: position.lineNumber,\r\n                                                endColumn: endColumn,\r\n                                            },\r\n                                        };\r\n                                    });\r\n                                return { suggestions };\r\n                            }\r\n\r\n                            return { suggestions: [] };\r\n                        },\r\n                    });\r\n\r\n                    // Auto-close \\begin{} with \\end{}\r\n                    monaco.languages.registerCompletionItemProvider(\"latex\", {\r\n                        triggerCharacters: [\"}\"],\r\n                        provideCompletionItems: (model, position) => {\r\n                            const lineContent = model.getLineContent(\r\n                                position.lineNumber,\r\n                            );\r\n                            const textBeforeCursor = lineContent.substring(\r\n                                0,\r\n                                position.column - 1,\r\n                            );\r\n                            const textAfterCursor = lineContent.substring(\r\n                                position.column - 1,\r\n                            );\r\n                            const beginMatch =\r\n                                textBeforeCursor.match(/\\\\begin\\{([^}]+)\\}$/);\r\n\r\n                            // Only suggest auto-close if there's not already an \\end{} on the same line\r\n                            // or if we haven't already inserted the environment completion\r\n                            if (beginMatch && !textAfterCursor.match(/^\\s*\\n\\s*\\\\end\\{/)) {\r\n                                const environmentName = beginMatch[1];\r\n\r\n                                // Check if this is one of our predefined environments\r\n                                // If so, don't auto-close as it was already handled by the environment completion\r\n                                if (latexEnvironments.includes(environmentName)) {\r\n                                    return { suggestions: [] };\r\n                                }\r\n\r\n                                return {\r\n                                    suggestions: [\r\n                                        {\r\n                                            label: `Auto-close \\\\end{${environmentName}}`,\r\n                                            kind: monaco.languages\r\n                                                .CompletionItemKind.Snippet,\r\n                                            insertText: `\\n\\t$0\\n\\\\end{${environmentName}}`,\r\n                                            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n                                            documentation: `Auto-close with \\\\end{${environmentName}}`,\r\n                                            range: {\r\n                                                startLineNumber:\r\n                                                    position.lineNumber,\r\n                                                startColumn: position.column,\r\n                                                endLineNumber:\r\n                                                    position.lineNumber,\r\n                                                endColumn: position.column,\r\n                                            },\r\n                                        },\r\n                                    ],\r\n                                };\r\n                            }\r\n\r\n                            return { suggestions: [] };\r\n                        },\r\n                    });\r\n\r\n                    // Create the editor\r\n                    monacoRef.current = monaco.editor.create(\r\n                        editorRef.current,\r\n                        {\r\n                            value: value,\r\n                            language: \"latex\",\r\n                            theme: theme === \"dark\" ? \"underbranch-dark\" : \"underbranch-light\",\r\n                            fontSize: 15,\r\n                            lineNumbers: \"on\",\r\n                            roundedSelection: true,\r\n                            scrollBeyondLastLine: false,\r\n                            automaticLayout: true,\r\n                            minimap: { enabled: false },\r\n                            wordWrap: \"on\",\r\n                            lineHeight: 24,\r\n                            padding: { top: 16, bottom: 16 },\r\n                            renderLineHighlight: \"all\",\r\n                            cursorBlinking: \"smooth\",\r\n                            cursorWidth: 2,\r\n                            fontFamily:\r\n                                \"'Fira Code', 'SF Mono', Consolas, 'Courier New', monospace\",\r\n                            fontLigatures: true,\r\n                            smoothScrolling: true,\r\n                            guides: {\r\n                                indentation: true,\r\n                                bracketPairs: true,\r\n                            },\r\n                        },\r\n                    );\r\n\r\n                    // Listen for content changes\r\n                    monacoRef.current.onDidChangeModelContent(() => {\r\n                        const currentValue = monacoRef.current.getValue();\r\n                        if (onChange) {\r\n                            onChange(currentValue);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        // Listen for clear editor event\r\n        const handleClearEditor = () => {\r\n            if (monacoRef.current) {\r\n                monacoRef.current.setValue(\"\");\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"clearEditor\", handleClearEditor);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"clearEditor\", handleClearEditor);\r\n            if (monacoRef.current) {\r\n                monacoRef.current.dispose();\r\n                monacoRef.current = null;\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // If the app-level theme changes, update the Monaco theme in-place.\r\n    useEffect(() => {\r\n        try {\r\n            if (monacoRef.current && window.monaco && window.monaco.editor) {\r\n                window.monaco.editor.setTheme(\r\n                    theme === \"dark\" ? \"underbranch-dark\" : \"underbranch-light\",\r\n                );\r\n            }\r\n        } catch (e) {\r\n            // Ignore: monaco may not be available during SSR or early loads\r\n        }\r\n    }, [theme]);\r\n\r\n    // Update editor value when prop changes\r\n    useEffect(() => {\r\n        if (monacoRef.current && monacoRef.current.getValue() !== value) {\r\n            monacoRef.current.setValue(value);\r\n        }\r\n    }, [value]);\r\n\r\n    // Recalculate layout when editor becomes visible\r\n    useEffect(() => {\r\n        if (!monacoRef.current) return;\r\n\r\n        if (isVisible) {\r\n            if (layoutTimeout.current) clearTimeout(layoutTimeout.current);\r\n            layoutTimeout.current = setTimeout(() => {\r\n                try {\r\n                    monacoRef.current.layout();\r\n                } catch (e) {\r\n                    console.warn(\"monaco.layout failed\", e);\r\n                }\r\n            }, 50);\r\n        }\r\n\r\n        return () => {\r\n            if (layoutTimeout.current) {\r\n                clearTimeout(layoutTimeout.current);\r\n                layoutTimeout.current = null;\r\n            }\r\n        };\r\n    }, [isVisible]);\r\n\r\n    return React.createElement(\"div\", {\r\n        ref: editorRef,\r\n        id: \"monaco-editor\",\r\n    });\r\n};\r\n\r\nexport default LaTeXEditor;\r\n","const PreviewPane = ({ latexCode }) => {\r\n    const { useState, useEffect } = React;\r\n    const [processedContent, setProcessedContent] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Simple LaTeX to HTML converter for basic preview\r\n    const processLaTeX = (latex) => {\r\n        setIsLoading(true);\r\n\r\n        // Basic LaTeX processing - this is a simplified version\r\n        let html = latex;\r\n\r\n        // Document structure\r\n        html = html.replace(/\\\\documentclass\\{[^}]+\\}/, '');\r\n        html = html.replace(/\\\\usepackage(?:\\[[^\\]]*\\])?\\{[^}]+\\}/g, '');\r\n        html = html.replace(/\\\\title\\{([^}]+)\\}/, '<h1 class=\"title\">$1</h1>');\r\n        html = html.replace(/\\\\author\\{([^}]+)\\}/, '<p class=\"author\">By: $1</p>');\r\n        html = html.replace(/\\\\date\\{([^}]+)\\}/, '<p class=\"date\">$1</p>');\r\n        html = html.replace(/\\\\maketitle/, '<div class=\"titlepage\"></div>');\r\n\r\n        // Sections\r\n        html = html.replace(/\\\\section\\{([^}]+)\\}/g, '<h2>$1</h2>');\r\n        html = html.replace(/\\\\subsection\\{([^}]+)\\}/g, '<h3>$1</h3>');\r\n        html = html.replace(/\\\\subsubsection\\{([^}]+)\\}/g, '<h4>$1</h4>');\r\n\r\n        // Math environments\r\n        html = html.replace(/\\\\begin\\{equation\\}([\\s\\S]*?)\\\\end\\{equation\\}/g, '<div class=\"equation\">$$1$</div>');\r\n        html = html.replace(/\\$([^$]+)\\$/g, '<span class=\"math\">$1</span>');\r\n\r\n        // Lists\r\n        html = html.replace(/\\\\begin\\{itemize\\}([\\s\\S]*?)\\\\end\\{itemize\\}/g, (match, content) => {\r\n            const items = content.replace(/\\\\item\\s+/g, '<li>').split('<li>').filter(item => item.trim());\r\n            return '<ul>' + items.map(item => '<li>' + item.trim() + '</li>').join('') + '</ul>';\r\n        });\r\n\r\n        html = html.replace(/\\\\begin\\{enumerate\\}([\\s\\S]*?)\\\\end\\{enumerate\\}/g, (match, content) => {\r\n            const items = content.replace(/\\\\item\\s+/g, '<li>').split('<li>').filter(item => item.trim());\r\n            return '<ol>' + items.map(item => '<li>' + item.trim() + '</li>').join('') + '</ol>';\r\n        });\r\n\r\n        // Text formatting\r\n        html = html.replace(/\\\\textbf\\{([^}]+)\\}/g, '<strong>$1</strong>');\r\n        html = html.replace(/\\\\textit\\{([^}]+)\\}/g, '<em>$1</em>');\r\n        html = html.replace(/\\\\emph\\{([^}]+)\\}/g, '<em>$1</em>');\r\n\r\n        // Clean up LaTeX commands and environments\r\n        html = html.replace(/\\\\begin\\{document\\}/, '');\r\n        html = html.replace(/\\\\end\\{document\\}/, '');\r\n        html = html.replace(/\\\\[a-zA-Z]+(?:\\[[^\\]]*\\])?\\{[^}]*\\}/g, '');\r\n        html = html.replace(/\\\\[a-zA-Z]+/g, '');\r\n\r\n        // Convert line breaks\r\n        html = html.replace(/\\n\\s*\\n/g, '</p><p>');\r\n        html = '<p>' + html + '</p>';\r\n        html = html.replace(/<p>\\s*<\\/p>/g, '');\r\n\r\n        setProcessedContent(html);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timeoutId = setTimeout(() => {\r\n            processLaTeX(latexCode);\r\n        }, 500); // Debounce processing\r\n\r\n        return () => clearTimeout(timeoutId);\r\n    }, [latexCode]);\r\n\r\n    if (isLoading) {\r\n        return React.createElement('div', { className: 'loading' }, 'Processing LaTeX...');\r\n    }\r\n\r\n    return React.createElement('div', { className: 'preview-content' },\r\n        React.createElement('div', {\r\n            dangerouslySetInnerHTML: { __html: processedContent }\r\n        }),\r\n        React.createElement('style', null, `\r\n            .preview-content h1.title {\r\n                text-align: center;\r\n                margin-bottom: 10px;\r\n                font-size: 24px;\r\n            }\r\n            .preview-content .author, .preview-content .date {\r\n                text-align: center;\r\n                margin: 5px 0;\r\n                color: #666;\r\n            }\r\n            .preview-content h2 {\r\n                margin: 20px 0 10px 0;\r\n                color: #333;\r\n                border-bottom: 1px solid #ddd;\r\n                padding-bottom: 5px;\r\n            }\r\n            .preview-content h3 {\r\n                margin: 15px 0 8px 0;\r\n                color: #444;\r\n            }\r\n            .preview-content h4 {\r\n                margin: 12px 0 6px 0;\r\n                color: #555;\r\n            }\r\n            .preview-content p {\r\n                margin: 10px 0;\r\n                line-height: 1.6;\r\n            }\r\n            .preview-content .equation {\r\n                text-align: center;\r\n                margin: 20px 0;\r\n                padding: 10px;\r\n                background: #f8f9fa;\r\n                border-left: 4px solid #007bff;\r\n                font-family: 'Times New Roman', serif;\r\n                font-style: italic;\r\n            }\r\n            .preview-content .math {\r\n                font-family: 'Times New Roman', serif;\r\n                font-style: italic;\r\n                background: #f0f0f0;\r\n                padding: 2px 4px;\r\n                border-radius: 3px;\r\n            }\r\n            .preview-content ul, .preview-content ol {\r\n                margin: 10px 0 10px 20px;\r\n            }\r\n            .preview-content li {\r\n                margin: 5px 0;\r\n            }\r\n        `)\r\n    );\r\n};\r\n\r\nexport default PreviewPane;\r\n","const Toolbar = ({\r\n    viewMode,\r\n    onViewModeChange,\r\n    latexCode,\r\n    onCompile,\r\n    pdfUrl,\r\n    theme,\r\n    onToggleTheme,\r\n}) => {\r\n    const handleDownload = () => {\r\n        const blob = new Blob([latexCode], { type: \"text/plain\" });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement(\"a\");\r\n        a.href = url;\r\n        a.download = \"document.tex\";\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n    };\r\n    // handler for downloading the pdf\r\n    const handleDownloadPDF = () => {\r\n        if (!pdfUrl) {\r\n            alert(\"No compiled PDF available. Please compile first.\");\r\n            return;\r\n        }\r\n\r\n        const a = document.createElement(\"a\");\r\n        a.href = pdfUrl;\r\n        a.download = \"document.pdf\";\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n    };\r\n\r\n    const handleClear = () => {\r\n        if (confirm(\"Are you sure you want to clear the editor?\")) {\r\n            onViewModeChange(\"editor\");\r\n            // This will be handled by the parent component\r\n            const event = new CustomEvent(\"clearEditor\");\r\n            window.dispatchEvent(event);\r\n        }\r\n    };\r\n\r\n    // Debug helpers - log button clicks\r\n    const handleViewClick = (mode) => {\r\n        console.log(\"[Toolbar] button click ->\", mode);\r\n        onViewModeChange(mode);\r\n    };\r\n\r\n    return React.createElement(\r\n        \"div\",\r\n        { className: \"toolbar\" },\r\n        React.createElement(\"h1\", null, \"LaTeX Editor\"),\r\n        React.createElement(\r\n            \"div\",\r\n            { className: \"toolbar-buttons\" },\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: `btn ${viewMode === \"editor\" ? \"btn-primary\" : \"btn-secondary\"}`,\r\n                    onClick: () => handleViewClick(\"editor\"),\r\n                },\r\n                \"Editor\",\r\n            ),\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: `btn ${viewMode === \"split\" ? \"btn-primary\" : \"btn-secondary\"}`,\r\n                    onClick: () => handleViewClick(\"split\"),\r\n                },\r\n                \"Split\",\r\n            ),\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: `btn ${viewMode === \"preview\" ? \"btn-primary\" : \"btn-secondary\"}`,\r\n                    onClick: () => handleViewClick(\"preview\"),\r\n                },\r\n                \"Preview\",\r\n            ),\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: \"btn btn-secondary\",\r\n                    onClick: handleDownload,\r\n                },\r\n                \"Download\",\r\n            ),\r\n            // add button for compilation\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: \"btn btn-primary\",\r\n                    onClick: onCompile,\r\n                },\r\n                \"Compile to PDF\",\r\n            ),\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: \"btn btn-secondary\",\r\n                    onClick: handleDownloadPDF,\r\n                    // button will start disabled since you don't\r\n                    // want to download a pdf that doesn't exist\r\n                    disabled: !pdfUrl,\r\n                },\r\n                \"Download PDF\",\r\n            ),\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: \"btn btn-secondary\",\r\n                    onClick: handleClear,\r\n                },\r\n                \"Clear\",\r\n            ),\r\n            React.createElement(\r\n                \"button\",\r\n                {\r\n                    className: `btn ${theme === \"dark\" ? \"btn-primary\" : \"btn-secondary\"}`,\r\n                    onClick: onToggleTheme,\r\n                    title: \"Toggle light/dark theme\",\r\n                },\r\n                theme === \"dark\" ? \"Light\" : \"Dark\",\r\n            ),\r\n        ),\r\n    );\r\n};\r\n\r\nexport default Toolbar;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Toolbar from './Toolbar.js';\r\nimport LaTeXEditor from './LaTeXEditor.js';\r\nimport PreviewPane from './PreviewPane.js';\r\nimport App from './App.js';\r\n// Import Collaborative features\r\nimport './Collaborative.js';\r\n\r\n// Make components available globally for backward compatibility\r\nwindow.Toolbar = Toolbar;\r\nwindow.LaTeXEditor = LaTeXEditor;\r\nwindow.PreviewPane = PreviewPane;\r\nwindow.App = App;\r\n\r\n// Function to initialize the app\r\nconst initializeApp = () => {\r\n    try {\r\n        // Wait for React to be available\r\n        if (typeof React !== 'undefined' && typeof ReactDOM !== 'undefined') {\r\n            const root = ReactDOM.createRoot(document.getElementById('root'));\r\n            root.render(React.createElement(App));\r\n        } else {\r\n            console.error('React or ReactDOM not loaded');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error loading app:', error);\r\n        document.getElementById('root').innerHTML = `\r\n            <div style=\"padding: 20px; text-align: center; color: red;\">\r\n                <h2>Error Loading Editor</h2>\r\n                <p>There was an error loading the LaTeX editor. Please check the console for details.</p>\r\n            </div>\r\n        `;\r\n    }\r\n};\r\n\r\n// Initialize when DOM is ready\r\nif (document.readyState === 'loading') {\r\n    document.addEventListener('DOMContentLoaded', initializeApp);\r\n} else {\r\n    initializeApp();\r\n}\r\n"],"names":["useState","useEffect","React","App","latexCode","setLatexCode","viewMode","setViewMode","pdfUrl","setPdfUrl","theme","setTheme","saved","localStorage","getItem","prefersDark","window","matchMedia","matches","e","handleCodeChange","value","handleCompile","res","fetch","method","headers","body","JSON","stringify","latex","ok","errText","text","alert","blob","url","URL","createObjectURL","Date","now","prevUrl","revokeObjectURL","err","message","console","log","document","title","dispatchEvent","Event","documentElement","setAttribute","setItem","editorClass","previewClass","editorVisible","previewVisible","createElement","className","Toolbar","onViewModeChange","onCompile","onToggleTheme","t","LaTeXEditor","onChange","isVisible","src","style","width","height","border","Collaborative","constructor","socket","editor","app","users","currentUser","currentRoom","isUpdatingFromRemote","decorations","init","waitForSocketIO","initSocket","getUserInfo","waitForEditor","setupCollaboration","Promise","resolve","checkSocketIO","io","setTimeout","on","data","userId","handleRemoteUpdate","length","updateUsersList","handleCursorUpdate","roomId","updateDocumentContent","content","showMessage","isPasswordProtected","error","promptForRoom","createRoom","confirm","password","prompt","joinRoom","exists","userName","userColor","getRandomColor","name","color","checkRoomExists","emit","userData","checkEditor","editorElement","getElementById","monaco","_monacoEditor","editors","getEditors","onDidChangeModelContent","getValue","changes","onDidChangeCursorPosition","lineNumber","position","column","getPosition","setValue","setPosition","oldDecorations","filter","d","deltaDecorations","map","id","decoration","range","Range","cursor","options","stickiness","TrackedRangeStickiness","NeverGrowsWhenTypingAtEdges","hoverMessage","user","after","inlineClassName","decorationIds","push","createUsersListUI","existingList","remove","usersList","cssText","roomInfo","roomTitle","textContent","switchButton","onclick","appendChild","forEach","userElement","colorDot","nameElement","colors","Math","floor","random","type","messageDiv","parentNode","removeChild","head","readyState","addEventListener","collaborative","useRef","editorRef","monacoRef","layoutTimeout","require","current","config","paths","vs","languages","register","defineTheme","base","inherit","rules","token","foreground","fontStyle","setMonarchTokensProvider","tokenizer","root","latexCommands","command","insertText","documentation","latexEnvironments","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","model","lineContent","getLineContent","textBeforeCursor","substring","commandMatch","match","partialCommand","textAfterCursor","suggestions","cmd","startsWith","hasOpenBrace","hasClosingBrace","endColumn","includes","replace","label","kind","CompletionItemKind","Function","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","startLineNumber","startColumn","endLineNumber","beginMatch","partialEnv","env","Keyword","environmentName","Snippet","create","language","fontSize","lineNumbers","roundedSelection","scrollBeyondLastLine","automaticLayout","minimap","enabled","wordWrap","lineHeight","padding","top","bottom","renderLineHighlight","cursorBlinking","cursorWidth","fontFamily","fontLigatures","smoothScrolling","guides","indentation","bracketPairs","currentValue","handleClearEditor","removeEventListener","dispose","clearTimeout","layout","warn","ref","PreviewPane","processedContent","setProcessedContent","isLoading","setIsLoading","processLaTeX","html","items","split","item","trim","join","timeoutId","dangerouslySetInnerHTML","__html","handleDownload","Blob","a","href","download","click","handleDownloadPDF","handleClear","event","CustomEvent","handleViewClick","mode","onClick","disabled","initializeApp","ReactDOM","createRoot","render","innerHTML"],"sourceRoot":""}

===== editor/index.html =====
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400   1) <!doctype html>
b045b9ad frontend/editor/editor.html (Ferrari        2025-09-16 18:03:02 -0400   2) <html lang="en">
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400   3)     <head>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400   4)         <meta charset="UTF-8" />
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400   5)         <meta name="viewport" content="width=device-width, initial-scale=1.0" />
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400   6)         <title>LaTeX Editor</title>
12b1526b editor/index.html           (pau1davis      2025-10-28 16:00:33 -0400   7)         <!-- Remove base href to avoid path issues -->
12b1526b editor/index.html           (pau1davis      2025-10-28 16:00:33 -0400   8)         <link rel="icon" type="image/png" href="../underbranch.png" />
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400   9)         <style>
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  10)             /* Theme variables */
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  11)             :root {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  12)                 --bg: #f5f5f5;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  13)                 --toolbar-bg: #2d3748;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  14)                 --toolbar-color: #ffffff;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  15)                 --btn-primary-bg: #4299e1;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  16)                 --btn-primary-hover: #3182ce;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  17)                 --btn-secondary-bg: #718096;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  18)                 --btn-secondary-hover: #4a5568;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  19)                 --border: #e2e8f0;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  20)                 --preview-bg: #ffffff;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  21)                 --muted: #718096;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  22)                 --text: #1a202c;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  23)             }
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  24) 
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  25)             /* Dark theme overrides */
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  26)             [data-theme="dark"] {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  27)                 --bg: #0f1724;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  28)                 --toolbar-bg: #0b1220;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  29)                 --toolbar-color: #e6eef8;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  30)                 --btn-primary-bg: #2b6cb0;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  31)                 --btn-primary-hover: #2c5282;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  32)                 --btn-secondary-bg: #334155;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  33)                 --btn-secondary-hover: #1f2937;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  34)                 --border: #243240;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  35)                 --preview-bg: #071122;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  36)                 --muted: #94a3b8;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  37)                 --text: #e6eef8;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  38)             }
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  39) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  40)             * {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  41)                 margin: 0;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  42)                 padding: 0;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  43)                 box-sizing: border-box;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  44)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  45) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  46)             body {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  47)                 font-family:
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  48)                     -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto",
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  49)                     sans-serif;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  50)                 background-color: var(--bg);
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  51)                 color: var(--text);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  52)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  53) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  54)             .app {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  55)                 height: 100vh;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  56)                 display: flex;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  57)                 flex-direction: column;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  58)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  59) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  60)             .toolbar {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  61)                 background: var(--toolbar-bg);
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  62)                 color: var(--toolbar-color);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  63)                 padding: 12px 16px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  64)                 display: flex;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  65)                 align-items: center;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  66)                 gap: 16px;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400  67)                 box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  68)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  69) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  70)             .toolbar h1 {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  71)                 font-size: 18px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  72)                 font-weight: 600;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  73)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  74) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  75)             .toolbar-buttons {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  76)                 display: flex;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  77)                 gap: 8px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  78)                 margin-left: auto;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  79)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  80) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  81)             /* viewmode-indicator removed for production look */
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  82) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  83)             /* Explicit split rules to ensure panes share space equally and
^8b16a41 frontend/editor/index.html  (Aaron Brown    2025-10-01 23:24:10 -0400  84)            avoid overlap (helps when Monaco or other editors don't
^8b16a41 frontend/editor/index.html  (Aaron Brown    2025-10-01 23:24:10 -0400  85)            immediately reflow). */
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  86)             .editor-pane.split {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  87)                 display: block;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  88)                 flex: 1 1 50%;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  89)                 min-width: 0; /* allow shrinking */
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  90)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  91) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  92)             .preview-pane.split {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  93)                 display: block;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  94)                 flex: 1 1 50%;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  95)                 min-width: 0;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  96)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  97) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  98)             .btn {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400  99)                 padding: 8px 12px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 100)                 border: none;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 101)                 border-radius: 4px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 102)                 cursor: pointer;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 103)                 font-size: 14px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 104)                 transition: background-color 0.2s;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 105)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 106) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 107)             .btn-primary {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 108)                 background: var(--btn-primary-bg);
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 109)                 color: var(--toolbar-color);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 110)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 111) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 112)             .btn-primary:hover {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 113)                 background: var(--btn-primary-hover);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 114)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 115) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 116)             .btn-secondary {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 117)                 background: var(--btn-secondary-bg);
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 118)                 color: var(--toolbar-color);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 119)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 120) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 121)             .btn-secondary:hover {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 122)                 background: var(--btn-secondary-hover);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 123)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 124) 
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 125)             .btn[disabled] {
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 126)                 opacity: 0.6;
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 127)                 cursor: not-allowed;
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 128)             }
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 129) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 130)             .editor-container {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 131)                 flex: 1;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 132)                 display: flex;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 133)                 overflow: hidden;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 134)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 135) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 136)             .editor-pane {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 137)                 flex: 1;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 138)                 border-right: 1px solid var(--border);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 139)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 140) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 141)             .preview-pane {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 142)                 flex: 1;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 143)                 background: var(--preview-bg);
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 144)                 padding: 20px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 145)                 overflow-y: auto;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 146)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 147) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 148)             .editor-pane.full {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 149)                 flex: 1;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 150)                 border-right: none;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 151)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 152) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 153)             .preview-pane.full {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 154)                 flex: 1;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 155)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 156) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 157)             /* When a pane is hidden we remove it from layout but keep it in
^8b16a41 frontend/editor/index.html  (Aaron Brown    2025-10-01 23:24:10 -0400 158)            the DOM so components (like Monaco) remain mounted. */
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 159)             .hidden {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 160)                 display: none !important;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 161)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 162) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 163)             #monaco-editor {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 164)                 height: 100%;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 165)                 width: 100%;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 166)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 167) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 168)             .preview-content {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 169)                 max-width: 800px;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 170)                 margin: 0 auto;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 171)                 line-height: 1.6;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 172)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 173) 
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 174)             .loading {
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 175)                 display: flex;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 176)                 align-items: center;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 177)                 justify-content: center;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 178)                 height: 100%;
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 179)                 color: var(--muted);
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 180)             }
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 181) 
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 182)             /* small transition for smoother theme switch */
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 183)             :root, [data-theme="dark"] {
5c8a19eb editor/index.html           (Brett Dowling  2025-10-30 16:00:55 -0400 184)                 transition: background-color 200ms ease, color 200ms ease;
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 185)             }
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 186)         </style>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 187)     </head>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 188)     <body>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 189)         <div id="root">
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 190)             <div class="loading">Loading LaTeX Editor...</div>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 191)         </div>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 192) 
12b1526b editor/index.html           (pau1davis      2025-10-28 16:00:33 -0400 193)         <!-- Socket.IO for real-time collaboration -->
d1c7121e editor/index.html           (pau1davis      2025-10-28 21:05:11 -0400 194)         <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
12b1526b editor/index.html           (pau1davis      2025-10-28 16:00:33 -0400 195)         <!-- React and ReactDOM from CDN -->
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 196)         <script
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 197)             crossorigin
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 198)             src="https://unpkg.com/react@18/umd/react.development.js"
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 199)         ></script>
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 200)         <script
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 201)             crossorigin
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 202)             src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
c70f3fc3 editor/index.html           (Robby Lawrence 2025-10-29 23:34:34 -0400 203)         ></script>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 204)         <!-- Monaco Editor -->
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 205)         <script src="https://unpkg.com/monaco-editor@0.44.0/min/vs/loader.js"></script>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 206) 
12b1526b editor/index.html           (pau1davis      2025-10-28 16:00:33 -0400 207)         <!-- Our bundled JavaScript (includes Collaborative.js) -->
12b1526b editor/index.html           (pau1davis      2025-10-28 16:00:33 -0400 208)         <script src="dist/bundle.js"></script>
a38f276e editor/index.html           (Ferrari        2025-10-16 10:32:04 -0400 209)     </body>
b88b40b4 frontend/editor/index.html  (Ferrari        2025-10-02 08:27:52 -0400 210) </html>

===== editor/src/App.js =====
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400   1) // Pull React hooks off the global React object. This file assumes React is
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400   2) // available globally (e.g. via a <script> tag or bundler that provides it).
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400   3) const { useState, useEffect } = React;
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400   4) 
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400   5) // Main application component. This is a small, non-JSX React component that
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400   6) // uses React.createElement to build the UI. It wires together three pieces:
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400   7) // - Toolbar: lets the user switch view modes and perform actions
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400   8) // - LaTeXEditor: an editor component for editing LaTeX source
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400   9) // - PreviewPane: renders the LaTeX source as HTML or a preview
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  10) const App = () => {
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  11)     // latexCode holds the current LaTeX source the user is editing. We
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  12)     // initialize it with a small sample document so the preview shows
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  13)     // something on first load.
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  14)     const [latexCode, setLatexCode] = useState(`\\documentclass{article}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  15) \\usepackage[utf8]{inputenc}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  16) \\title{My LaTeX Document}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  17) \\author{Author Name}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  18) \\date{\\today}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  19) 
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  20) \\begin{document}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  21) 
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  22) \\maketitle
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  23) 
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  24) \\section{Introduction}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  25) This is a sample LaTeX document. You can edit this text in the editor.
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  26) 
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  27) \\section{Mathematical Equations}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  28) Here's a mathematical equation:
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  29) \\begin{equation}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  30) E = mc^2
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  31) \\end{equation}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  32) 
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  33) And an inline equation: $\\alpha + \\beta = \\gamma$
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  34) 
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  35) \\subsection{More Examples}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  36) \\begin{itemize}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  37) \\item First item
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  38) \\item Second item
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  39) \\item Third item
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  40) \\end{itemize}
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  41) 
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  42) \\end{document}`);
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  43) 
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  44)     // viewMode controls which panes are visible. Possible values:
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  45)     // - 'editor'  -> only the editor is shown
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  46)     // - 'preview' -> only the preview is shown
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  47)     // - 'split'   -> both are shown side-by-side
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  48)     const [viewMode, setViewMode] = useState("split"); // 'editor', 'preview', 'split'
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  49)     const [pdfUrl, setPdfUrl] = useState(null);
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  50)     
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  51)     // Theme state: 'light' or 'dark'. Persist to localStorage and prefer
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  52)     // the user's system preference when no saved preference exists.
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  53)     const [theme, setTheme] = useState(() => {
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  54)         try {
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  55)             const saved = localStorage.getItem("ub_theme");
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  56)             if (saved) return saved;
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  57)             const prefersDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  58)             return prefersDark ? "dark" : "light";
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  59)         } catch (e) {
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  60)             return "light";
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  61)         }
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  62)     });
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  63)     
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400  64)     
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  65)     // handleCodeChange is passed to the editor component. It receives the
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  66)     // new text value and updates the latexCode state. We guard against
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  67)     // undefined/null by falling back to an empty string.
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  68)     const handleCodeChange = (value) => {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  69)         setLatexCode(value || "");
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  70)     };
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  71)     // handle compilation
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  72)     const handleCompile = async () => {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  73)         try {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  74)             const res = await fetch("/compile/", {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  75)                 method: "POST",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  76)                 headers: { "Content-Type": "application/json" },
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  77)                 body: JSON.stringify({ latex: latexCode }),
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  78)             });
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  79) 
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  80)             if (!res.ok) {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  81)                 const errText = await res.text();
a92cc0c9 editor/src/App.js          (Robby Lawrence 2025-10-29 11:24:06 -0400  82)                 alert("Compilation error: server is likely down");
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  83)                 return;
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  84)             }
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  85) 
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  86)             const blob = await res.blob();
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  87)             const url = URL.createObjectURL(blob) + `#${Date.now()}`;
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  88)             // clean up old blobs
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  89)             setPdfUrl((prevUrl) => {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  90)                 if (prevUrl) URL.revokeObjectURL(prevUrl);
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  91)                 return url;
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  92)             });
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  93)         } catch (err) {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  94)             alert("Network or server error: " + err.message);
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  95)         }
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  96)     };
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400  97) 
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  98)     // Debug: log viewMode transitions so we can trace state changes while
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400  99)     // reproducing the issue in the browser console.
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 100)     useEffect(() => {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 101)         console.log("[App] viewMode changed ->", viewMode);
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 102)         // Also update the document title so the current mode is visible
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 103)         // in the browser tab (easy to spot without opening devtools).
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 104)         try {
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 105)             document.title = `LaTeX Editor ΓÇö ${viewMode}`;
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 106)         } catch (e) {
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 107)             // ignore (server side or non-browser env)
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 108)         }
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 109)         // Trigger a resize event to nudge layout systems (Monaco, CSS)
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 110)         // to recompute sizes when the view mode changes.
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 111)         try {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 112)             window.dispatchEvent(new Event("resize"));
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 113)         } catch (e) {
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 114)             // ignore in non-browser environments
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 115)         }
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 116)     }, [viewMode]);
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 117) 
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 118)     
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 119)     // Apply theme to document root and persist choice
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 120)     useEffect(() => {
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 121)         try {
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 122)             document.documentElement.setAttribute("data-theme", theme);
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 123)             localStorage.setItem("ub_theme", theme);
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 124)         } catch (e) {
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 125)             // ignore when not in browser
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 126)         }
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 127)     }, [theme]);
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 128) 
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 129) 
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 130)     // The UI layout is built with React.createElement calls instead of JSX.
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 131)     // To avoid layout glitches when switching modes we render both panes
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 132)     // consistently and toggle their visibility/size using explicit CSS
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 133)     // class names: 'split', 'full', or 'hidden'. This prevents frequent
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 134)     // unmount/remount of the editor which can cause Monaco/DOM layout issues.
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 135)     const editorClass =
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 136)         viewMode === "split"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 137)             ? "split"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 138)             : viewMode === "editor"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 139)               ? "full"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 140)               : "hidden";
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 141)     const previewClass =
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 142)         viewMode === "split"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 143)             ? "split"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 144)             : viewMode === "preview"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 145)               ? "full"
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 146)               : "hidden";
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 147) 
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 148)     const editorVisible = viewMode === "split" || viewMode === "editor";
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 149)     const previewVisible = viewMode === "split" || viewMode === "preview";
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 150) 
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 151)     return React.createElement(
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 152)         "div",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 153)         { className: "app" },
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400 154)         React.createElement(Toolbar, {
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400 155)             viewMode: viewMode,
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400 156)             onViewModeChange: setViewMode,
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 157)             latexCode: latexCode,
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 158)             // add compilation handler
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 159)             onCompile: handleCompile,
18e3440b editor/src/App.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 160)             // i want the user to be able to download the pdf
18e3440b editor/src/App.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 161)             // - robby
18e3440b editor/src/App.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 162)             pdfUrl: pdfUrl,
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 163)             theme: theme,
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 164)             onToggleTheme: () =>setTheme((t) => (t === "light" ? "dark" : "light")),
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400 165)         }),
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 166) 
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 167)         React.createElement(
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 168)             "div",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 169)             { className: `editor-container mode-${viewMode}` },
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 170)             // Editor pane is always present but may be hidden via the
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 171)             // 'hidden' class. This keeps Monaco mounted and stable.
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 172)             React.createElement(
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 173)                 "div",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 174)                 {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 175)                     className: `editor-pane ${editorClass}`,
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 176)                 },
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 177)                 React.createElement(LaTeXEditor, {
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 178)                     value: latexCode,
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 179)                     onChange: handleCodeChange,
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 180)                     isVisible: editorVisible,
5c8a19eb editor/src/App.js          (Brett Dowling  2025-10-30 16:00:55 -0400 181)                     theme: theme,
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 182)                 }),
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 183)             ),
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 184) 
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 185)             // Preview pane is always present as well; it will be hidden
^8b16a41 frontend/editor/src/App.js (Aaron Brown    2025-10-01 23:24:10 -0400 186)             // when not in 'preview' or 'split' modes.
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 187)             React.createElement(
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 188)                 "div",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 189)                 { className: `preview-pane ${previewClass}` },
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 190)                 pdfUrl
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 191)                     ? React.createElement("iframe", {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 192)                           src: pdfUrl,
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 193)                           style: {
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 194)                               width: "100%",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 195)                               height: "100%",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 196)                               border: "none",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 197)                           },
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 198)                           title: "PDF Preview",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 199)                       })
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 200)                     : React.createElement(
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 201)                           "div",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 202)                           { className: "loading" },
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 203)                           "No PDF yet",
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 204)                       ),
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 205)             ),
601d4f52 editor/src/App.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 206)         ),
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400 207)     );
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400 208) };
b045b9ad frontend/editor/src/App.js (Ferrari        2025-09-16 18:03:02 -0400 209) 
b88b40b4 frontend/editor/src/App.js (Ferrari        2025-10-02 08:27:52 -0400 210) export default App;

===== editor/src/LaTeXEditor.js =====
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   1) const { useEffect, useRef } = React;
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   2) 
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400   3) const LaTeXEditor = ({ value, onChange, isVisible = true, theme = "light" }) => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   4)     const editorRef = useRef(null);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   5)     const monacoRef = useRef(null);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   6)     const layoutTimeout = useRef(null);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   7) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   8)     useEffect(() => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400   9)         // Initialize Monaco Editor
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  10)         if (window.require && !monacoRef.current) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  11)             window.require.config({
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  12)                 paths: { vs: "https://unpkg.com/monaco-editor@0.44.0/min/vs" },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  13)             });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  14) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  15)             window.require(["vs/editor/editor.main"], () => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  16)                 if (editorRef.current && !monacoRef.current) {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  17)                     // Configure LaTeX language
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  18)                     monaco.languages.register({ id: "latex" });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  19) 
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  20)                     // Define light and dark themes so the editor responds to
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  21)                     // the app-level theme toggle. We keep token rules similar
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  22)                     // but swap base and color tokens for readability on dark.
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  23)                     monaco.editor.defineTheme("underbranch-light", {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  24)                         base: "vs",
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400  25)                         inherit: true,
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400  26)                         rules: [
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  27)                             { token: "keyword", foreground: "B5632D" },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  28)                             { token: "string", foreground: "218721" },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  29)                             {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  30)                                 token: "comment",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  31)                                 foreground: "737373",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  32)                                 fontStyle: "italic",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  33)                             },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  34)                             { token: "bracket", foreground: "505050" },
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400  35)                         ],
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400  36)                         colors: {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  37)                             "editor.background": "#FFFFFF",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  38)                             "editor.foreground": "#333333",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  39)                             "editor.lineHighlightBackground": "#F5F5F5",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  40)                             "editorCursor.foreground": "#B5632D",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  41)                             "editor.selectionBackground": "#E8D3C7",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  42)                             "editorLineNumber.foreground": "#999999",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  43)                         },
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400  44)                     });
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400  45) 
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  46)                     monaco.editor.defineTheme("underbranch-dark", {
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  47)                         base: "vs-dark",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  48)                         inherit: true,
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  49)                         rules: [
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  50)                             { token: "keyword", foreground: "DCA06B" },
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  51)                             { token: "string", foreground: "78C179" },
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  52)                             {
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  53)                                 token: "comment",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  54)                                 foreground: "94A3B8",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  55)                                 fontStyle: "italic",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  56)                             },
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  57)                             { token: "bracket", foreground: "9AA6B2" },
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  58)                         ],
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  59)                         colors: {
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  60)                             // Dark background aligned with page dark vars
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  61)                             "editor.background": "#071122",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  62)                             "editor.foreground": "#E6EEF8",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  63)                             "editor.lineHighlightBackground": "#0b2230",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  64)                             "editorCursor.foreground": "#B5632D",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  65)                             "editor.selectionBackground": "#163246",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  66)                             "editorLineNumber.foreground": "#6B7280",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  67)                         },
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  68)                     });
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400  69) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  70)                     // Syntax highlighting
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  71)                     monaco.languages.setMonarchTokensProvider("latex", {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  72)                         tokenizer: {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  73)                             root: [
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  74)                                 [/\\[a-zA-Z@]+/, "keyword"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  75)                                 [/\\begin\{[^}]+\}/, "keyword"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  76)                                 [/\\end\{[^}]+\}/, "keyword"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  77)                                 [/\$.*?\$/, "string"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  78)                                 [/\\\(.*?\\\)/, "string"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  79)                                 [/\\\[.*?\\\]/, "string"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  80)                                 [/%.*$/, "comment"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  81)                                 [/\{/, "bracket"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  82)                                 [/\}/, "bracket"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  83)                             ],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  84)                         },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  85)                     });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400  86) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  87)                     // LaTeX command definitions
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  88)                     const latexCommands = [
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  89)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  90)                             command: "begin",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  91)                             insertText: "begin{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  92)                             documentation: "Begin environment",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  93)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  94)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  95)                             command: "end",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  96)                             insertText: "end{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  97)                             documentation: "End environment",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  98)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400  99)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 100)                             command: "textbf",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 101)                             insertText: "textbf{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 102)                             documentation: "Bold text",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 103)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 104)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 105)                             command: "textit",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 106)                             insertText: "textit{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 107)                             documentation: "Italic text",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 108)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 109)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 110)                             command: "underline",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 111)                             insertText: "underline{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 112)                             documentation: "Underline text",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 113)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 114)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 115)                             command: "section",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 116)                             insertText: "section{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 117)                             documentation: "Section",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 118)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 119)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 120)                             command: "subsection",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 121)                             insertText: "subsection{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 122)                             documentation: "Subsection",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 123)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 124)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 125)                             command: "subsubsection",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 126)                             insertText: "subsubsection{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 127)                             documentation: "Subsubsection",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 128)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 129)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 130)                             command: "chapter",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 131)                             insertText: "chapter{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 132)                             documentation: "Chapter",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 133)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 134)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 135)                             command: "title",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 136)                             insertText: "title{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 137)                             documentation: "Document title",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 138)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 139)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 140)                             command: "author",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 141)                             insertText: "author{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 142)                             documentation: "Document author",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 143)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 144)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 145)                             command: "date",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 146)                             insertText: "date{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 147)                             documentation: "Document date",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 148)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 149)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 150)                             command: "emph",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 151)                             insertText: "emph{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 152)                             documentation: "Emphasize text",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 153)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 154)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 155)                             command: "frac",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 156)                             insertText: "frac{$1}{$2}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 157)                             documentation: "Fraction",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 158)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 159)                         {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 160)                             command: "sqrt",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 161)                             insertText: "sqrt{$0}",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 162)                             documentation: "Square root",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 163)                         },
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 164)                     ];
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 165) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 166)                     const latexEnvironments = [
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 167)                         "document",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 168)                         "equation",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 169)                         "align",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 170)                         "itemize",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 171)                         "enumerate",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 172)                         "figure",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 173)                         "table",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 174)                         "center",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 175)                         "abstract",
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 176)                     ];
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 177) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 178)                     // Register completion provider for LaTeX commands
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 179)                     monaco.languages.registerCompletionItemProvider("latex", {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 180)                         triggerCharacters: ["\\", "{"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 181)                         provideCompletionItems: (model, position) => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 182)                             const lineContent = model.getLineContent(
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 183)                                 position.lineNumber,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 184)                             );
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 185)                             const textBeforeCursor = lineContent.substring(
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 186)                                 0,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 187)                                 position.column - 1,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 188)                             );
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 189) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 190)                             // Command completions (after \)
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 191)                             const commandMatch =
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 192)                                 textBeforeCursor.match(/\\([a-zA-Z]*)$/);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 193)                             if (commandMatch) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 194)                                 const partialCommand = commandMatch[1];
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 195)                                 const textAfterCursor = lineContent.substring(
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 196)                                     position.column - 1,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 197)                                 );
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 198) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 199)                                 const suggestions = latexCommands
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 200)                                     .filter((cmd) =>
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 201)                                         cmd.command.startsWith(partialCommand),
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 202)                                     )
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 203)                                     .map((cmd) => {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 204)                                         // Check if cursor is inside braces and there's a closing brace
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 205)                                         const hasOpenBrace = textBeforeCursor.match(/\{[^}]*$/);
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 206)                                         const hasClosingBrace = hasOpenBrace && textAfterCursor.startsWith('}');
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 207) 
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 208)                                         // If we're inside braces with a closing brace, don't include it in insertText
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 209)                                         let insertText = cmd.insertText;
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 210)                                         let endColumn = position.column;
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 211) 
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 212)                                         if (hasClosingBrace && insertText.includes('{')) {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 213)                                             // Remove the closing brace from commands like "textbf{$0}"
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 214)                                             insertText = insertText.replace(/\{([^}]*)\}/, '{$1');
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 215)                                             endColumn = position.column + 1; // Include the closing brace in replacement
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 216)                                         }
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 217) 
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 218)                                         return {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 219)                                             label: cmd.command,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 220)                                             kind: monaco.languages
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 221)                                                 .CompletionItemKind.Function,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 222)                                             insertText: insertText,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 223)                                             insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 224)                                             documentation: cmd.documentation,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 225)                                             range: {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 226)                                                 startLineNumber:
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 227)                                                     position.lineNumber,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 228)                                                 startColumn:
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 229)                                                     position.column -
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 230)                                                     partialCommand.length,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 231)                                                 endLineNumber: position.lineNumber,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 232)                                                 endColumn: endColumn,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 233)                                             },
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 234)                                         };
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 235)                                     });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 236)                                 return { suggestions };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 237)                             }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 238) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 239)                             // Environment completions (after \begin{)
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 240)                             const beginMatch =
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 241)                                 textBeforeCursor.match(/\\begin\{([^}]*)$/);
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 242)                             if (beginMatch) {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 243)                                 const partialEnv = beginMatch[1];
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 244)                                 const textAfterCursor = lineContent.substring(position.column - 1);
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 245) 
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 246)                                 // Check if there's already a closing brace after the cursor
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 247)                                 const hasClosingBrace = textAfterCursor.startsWith('}');
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 248) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 249)                                 const suggestions = latexEnvironments
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 250)                                     .filter((env) => env.startsWith(partialEnv))
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 251)                                     .map((env) => {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 252)                                         // If there's already a closing brace, we need to handle it carefully
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 253)                                         let insertText, endColumn;
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 254)                                         if (hasClosingBrace) {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 255)                                             // Include the environment content but skip past the existing closing brace
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 256)                                             insertText = `${env}}\n\t$0\n\\end{${env}}`;
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 257)                                             endColumn = position.column + 1; // Replace up to and including the }
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 258)                                         } else {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 259)                                             // No closing brace, add everything including the brace
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 260)                                             insertText = `${env}}\n\t$0\n\\end{${env}}`;
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 261)                                             endColumn = position.column;
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 262)                                         }
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 263) 
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 264)                                         return {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 265)                                             label: env,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 266)                                             kind: monaco.languages
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 267)                                                 .CompletionItemKind.Keyword,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 268)                                             insertText: insertText,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 269)                                             insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 270)                                             documentation: `Insert ${env} environment`,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 271)                                             range: {
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 272)                                                 startLineNumber:
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 273)                                                     position.lineNumber,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 274)                                                 startColumn: position.column - partialEnv.length,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 275)                                                 endLineNumber: position.lineNumber,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 276)                                                 endColumn: endColumn,
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 277)                                             },
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 278)                                         };
8fa4eecd (Ferrari       2025-10-27 23:24:58 -0400 279)                                     });
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 280)                                 return { suggestions };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 281)                             }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 282) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 283)                             return { suggestions: [] };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 284)                         },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 285)                     });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 286) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 287)                     // Auto-close \begin{} with \end{}
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 288)                     monaco.languages.registerCompletionItemProvider("latex", {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 289)                         triggerCharacters: ["}"],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 290)                         provideCompletionItems: (model, position) => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 291)                             const lineContent = model.getLineContent(
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 292)                                 position.lineNumber,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 293)                             );
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 294)                             const textBeforeCursor = lineContent.substring(
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 295)                                 0,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 296)                                 position.column - 1,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 297)                             );
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 298)                             const textAfterCursor = lineContent.substring(
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 299)                                 position.column - 1,
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 300)                             );
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 301)                             const beginMatch =
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 302)                                 textBeforeCursor.match(/\\begin\{([^}]+)\}$/);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 303) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 304)                             // Only suggest auto-close if there's not already an \end{} on the same line
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 305)                             // or if we haven't already inserted the environment completion
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 306)                             if (beginMatch && !textAfterCursor.match(/^\s*\n\s*\\end\{/)) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 307)                                 const environmentName = beginMatch[1];
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 308) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 309)                                 // Check if this is one of our predefined environments
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 310)                                 // If so, don't auto-close as it was already handled by the environment completion
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 311)                                 if (latexEnvironments.includes(environmentName)) {
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 312)                                     return { suggestions: [] };
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 313)                                 }
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 314) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 315)                                 return {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 316)                                     suggestions: [
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 317)                                         {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 318)                                             label: `Auto-close \\end{${environmentName}}`,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 319)                                             kind: monaco.languages
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 320)                                                 .CompletionItemKind.Snippet,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 321)                                             insertText: `\n\t$0\n\\end{${environmentName}}`,
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 322)                                             insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 323)                                             documentation: `Auto-close with \\end{${environmentName}}`,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 324)                                             range: {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 325)                                                 startLineNumber:
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 326)                                                     position.lineNumber,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 327)                                                 startColumn: position.column,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 328)                                                 endLineNumber:
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 329)                                                     position.lineNumber,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 330)                                                 endColumn: position.column,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 331)                                             },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 332)                                         },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 333)                                     ],
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 334)                                 };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 335)                             }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 336) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 337)                             return { suggestions: [] };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 338)                         },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 339)                     });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 340) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 341)                     // Create the editor
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 342)                     monacoRef.current = monaco.editor.create(
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 343)                         editorRef.current,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 344)                         {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 345)                             value: value,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 346)                             language: "latex",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 347)                             theme: theme === "dark" ? "underbranch-dark" : "underbranch-light",
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 348)                             fontSize: 15,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 349)                             lineNumbers: "on",
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 350)                             roundedSelection: true,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 351)                             scrollBeyondLastLine: false,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 352)                             automaticLayout: true,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 353)                             minimap: { enabled: false },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 354)                             wordWrap: "on",
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 355)                             lineHeight: 24,
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 356)                             padding: { top: 16, bottom: 16 },
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 357)                             renderLineHighlight: "all",
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 358)                             cursorBlinking: "smooth",
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 359)                             cursorWidth: 2,
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 360)                             fontFamily:
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 361)                                 "'Fira Code', 'SF Mono', Consolas, 'Courier New', monospace",
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 362)                             fontLigatures: true,
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 363)                             smoothScrolling: true,
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 364)                             guides: {
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 365)                                 indentation: true,
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 366)                                 bracketPairs: true,
3e706b4b (pau1davis     2025-10-16 20:59:11 -0400 367)                             },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 368)                         },
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 369)                     );
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 370) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 371)                     // Listen for content changes
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 372)                     monacoRef.current.onDidChangeModelContent(() => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 373)                         const currentValue = monacoRef.current.getValue();
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 374)                         if (onChange) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 375)                             onChange(currentValue);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 376)                         }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 377)                     });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 378)                 }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 379)             });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 380)         }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 381) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 382)         // Listen for clear editor event
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 383)         const handleClearEditor = () => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 384)             if (monacoRef.current) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 385)                 monacoRef.current.setValue("");
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 386)             }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 387)         };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 388) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 389)         window.addEventListener("clearEditor", handleClearEditor);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 390) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 391)         return () => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 392)             window.removeEventListener("clearEditor", handleClearEditor);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 393)             if (monacoRef.current) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 394)                 monacoRef.current.dispose();
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 395)                 monacoRef.current = null;
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 396)             }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 397)         };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 398)     }, []);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 399) 
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 400)     // If the app-level theme changes, update the Monaco theme in-place.
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 401)     useEffect(() => {
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 402)         try {
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 403)             if (monacoRef.current && window.monaco && window.monaco.editor) {
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 404)                 window.monaco.editor.setTheme(
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 405)                     theme === "dark" ? "underbranch-dark" : "underbranch-light",
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 406)                 );
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 407)             }
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 408)         } catch (e) {
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 409)             // Ignore: monaco may not be available during SSR or early loads
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 410)         }
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 411)     }, [theme]);
5c8a19eb (Brett Dowling 2025-10-30 16:00:55 -0400 412) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 413)     // Update editor value when prop changes
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 414)     useEffect(() => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 415)         if (monacoRef.current && monacoRef.current.getValue() !== value) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 416)             monacoRef.current.setValue(value);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 417)         }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 418)     }, [value]);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 419) 
1df2fe04 (Ferrari       2025-10-27 23:02:07 -0400 420)     // Recalculate layout when editor becomes visible
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 421)     useEffect(() => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 422)         if (!monacoRef.current) return;
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 423) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 424)         if (isVisible) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 425)             if (layoutTimeout.current) clearTimeout(layoutTimeout.current);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 426)             layoutTimeout.current = setTimeout(() => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 427)                 try {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 428)                     monacoRef.current.layout();
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 429)                 } catch (e) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 430)                     console.warn("monaco.layout failed", e);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 431)                 }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 432)             }, 50);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 433)         }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 434) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 435)         return () => {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 436)             if (layoutTimeout.current) {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 437)                 clearTimeout(layoutTimeout.current);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 438)                 layoutTimeout.current = null;
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 439)             }
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 440)         };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 441)     }, [isVisible]);
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 442) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 443)     return React.createElement("div", {
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 444)         ref: editorRef,
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 445)         id: "monaco-editor",
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 446)     });
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 447) };
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 448) 
9b6bdc7d (Ferrari       2025-10-16 10:12:26 -0400 449) export default LaTeXEditor;

===== editor/src/Toolbar.js =====
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400   1) const Toolbar = ({
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400   2)     viewMode,
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400   3)     onViewModeChange,
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400   4)     latexCode,
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400   5)     onCompile,
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400   6)     pdfUrl,
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400   7)     theme,
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400   8)     onToggleTheme,
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400   9) }) => {
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  10)     const handleDownload = () => {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  11)         const blob = new Blob([latexCode], { type: "text/plain" });
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  12)         const url = URL.createObjectURL(blob);
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  13)         const a = document.createElement("a");
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  14)         a.href = url;
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  15)         a.download = "document.tex";
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  16)         document.body.appendChild(a);
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  17)         a.click();
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  18)         document.body.removeChild(a);
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  19)         URL.revokeObjectURL(url);
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  20)     };
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  21)     // handler for downloading the pdf
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  22)     const handleDownloadPDF = () => {
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  23)         if (!pdfUrl) {
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  24)             alert("No compiled PDF available. Please compile first.");
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  25)             return;
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  26)         }
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  27) 
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  28)         const a = document.createElement("a");
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  29)         a.href = pdfUrl;
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  30)         a.download = "document.pdf";
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  31)         document.body.appendChild(a);
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  32)         a.click();
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  33)         document.body.removeChild(a);
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  34)     };
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  35) 
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  36)     const handleClear = () => {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  37)         if (confirm("Are you sure you want to clear the editor?")) {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  38)             onViewModeChange("editor");
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  39)             // This will be handled by the parent component
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  40)             const event = new CustomEvent("clearEditor");
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  41)             window.dispatchEvent(event);
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  42)         }
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  43)     };
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  44) 
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  45)     // Debug helpers - log button clicks
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  46)     const handleViewClick = (mode) => {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  47)         console.log("[Toolbar] button click ->", mode);
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  48)         onViewModeChange(mode);
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  49)     };
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400  50) 
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  51)     return React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  52)         "div",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  53)         { className: "toolbar" },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  54)         React.createElement("h1", null, "LaTeX Editor"),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  55)         React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  56)             "div",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  57)             { className: "toolbar-buttons" },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  58)             React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  59)                 "button",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  60)                 {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  61)                     className: `btn ${viewMode === "editor" ? "btn-primary" : "btn-secondary"}`,
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  62)                     onClick: () => handleViewClick("editor"),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  63)                 },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  64)                 "Editor",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  65)             ),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  66)             React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  67)                 "button",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  68)                 {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  69)                     className: `btn ${viewMode === "split" ? "btn-primary" : "btn-secondary"}`,
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  70)                     onClick: () => handleViewClick("split"),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  71)                 },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  72)                 "Split",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  73)             ),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  74)             React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  75)                 "button",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  76)                 {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  77)                     className: `btn ${viewMode === "preview" ? "btn-primary" : "btn-secondary"}`,
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  78)                     onClick: () => handleViewClick("preview"),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  79)                 },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  80)                 "Preview",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  81)             ),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  82)             React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  83)                 "button",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  84)                 {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  85)                     className: "btn btn-secondary",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  86)                     onClick: handleDownload,
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  87)                 },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  88)                 "Download",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  89)             ),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  90)             // add button for compilation
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  91)             React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  92)                 "button",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  93)                 {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  94)                     className: "btn btn-primary",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  95)                     onClick: onCompile,
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  96)                 },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  97)                 "Compile to PDF",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400  98)             ),
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400  99)             React.createElement(
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 100)                 "button",
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 101)                 {
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 102)                     className: "btn btn-secondary",
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 103)                     onClick: handleDownloadPDF,
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 104)                     // button will start disabled since you don't
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 105)                     // want to download a pdf that doesn't exist
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 106)                     disabled: !pdfUrl,
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 107)                 },
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 108)                 "Download PDF",
18e3440b editor/src/Toolbar.js          (Robby Lawrence 2025-10-29 23:33:34 -0400 109)             ),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 110)             React.createElement(
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 111)                 "button",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 112)                 {
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 113)                     className: "btn btn-secondary",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 114)                     onClick: handleClear,
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 115)                 },
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 116)                 "Clear",
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 117)             ),
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 118)             React.createElement(
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 119)                 "button",
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 120)                 {
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 121)                     className: `btn ${theme === "dark" ? "btn-primary" : "btn-secondary"}`,
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 122)                     onClick: onToggleTheme,
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 123)                     title: "Toggle light/dark theme",
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 124)                 },
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 125)                 theme === "dark" ? "Light" : "Dark",
5c8a19eb editor/src/Toolbar.js          (Brett Dowling  2025-10-30 16:00:55 -0400 126)             ),
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 127)         ),
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400 128)     );
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400 129) };
^8b16a41 frontend/editor/src/Toolbar.js (Aaron Brown    2025-10-01 23:24:10 -0400 130) 
601d4f52 editor/src/Toolbar.js          (Robby Lawrence 2025-10-28 21:19:55 -0400 131) export default Toolbar;

